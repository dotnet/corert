
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// DO NOT EDIT THIS FILE! It IS AUTOGENERATED
using System;
using System.Runtime.InteropServices;

namespace Internal.JitInterface
{
    unsafe partial class CorInfoImpl
    {
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate uint _getMethodAttribs(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _setMethodAttribs(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn, CorInfoMethodRuntimeFlags attribs);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _getMethodSig(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn, CORINFO_SIG_INFO* sig, CORINFO_CLASS_STRUCT_* memberParent);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.I1)]delegate bool _getMethodInfo(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn, ref CORINFO_METHOD_INFO info);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoInline _canInline(IntPtr _this, CORINFO_METHOD_STRUCT_* callerHnd, CORINFO_METHOD_STRUCT_* calleeHnd, ref uint pRestrictions);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _reportInliningDecision(IntPtr _this, CORINFO_METHOD_STRUCT_* inlinerHnd, CORINFO_METHOD_STRUCT_* inlineeHnd, CorInfoInline inlineResult, byte* reason);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.I1)]delegate bool _canTailCall(IntPtr _this, CORINFO_METHOD_STRUCT_* callerHnd, CORINFO_METHOD_STRUCT_* declaredCalleeHnd, CORINFO_METHOD_STRUCT_* exactCalleeHnd, [MarshalAs(UnmanagedType.I1)]bool fIsTailPrefix);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _reportTailCallDecision(IntPtr _this, CORINFO_METHOD_STRUCT_* callerHnd, CORINFO_METHOD_STRUCT_* calleeHnd, [MarshalAs(UnmanagedType.I1)]bool fIsTailPrefix, CorInfoTailCall tailCallResult, byte* reason);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _getEHinfo(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn, uint EHnumber, ref CORINFO_EH_CLAUSE clause);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_CLASS_STRUCT_* _getMethodClass(IntPtr _this, CORINFO_METHOD_STRUCT_* method);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_MODULE_STRUCT_* _getMethodModule(IntPtr _this, CORINFO_METHOD_STRUCT_* method);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _getMethodVTableOffset(IntPtr _this, CORINFO_METHOD_STRUCT_* method, ref uint offsetOfIndirection, ref uint offsetAfterIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoIntrinsics _getIntrinsicID(IntPtr _this, CORINFO_METHOD_STRUCT_* method);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.I1)]delegate bool _isInSIMDModule(IntPtr _this, CORINFO_CLASS_STRUCT_* classHnd);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoUnmanagedCallConv _getUnmanagedCallConv(IntPtr _this, CORINFO_METHOD_STRUCT_* method);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _pInvokeMarshalingRequired(IntPtr _this, CORINFO_METHOD_STRUCT_* method, CORINFO_SIG_INFO* callSiteSig);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _satisfiesMethodConstraints(IntPtr _this, CORINFO_CLASS_STRUCT_* parent, CORINFO_METHOD_STRUCT_* method);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _isCompatibleDelegate(IntPtr _this, CORINFO_CLASS_STRUCT_* objCls, CORINFO_CLASS_STRUCT_* methodParentCls, CORINFO_METHOD_STRUCT_* method, CORINFO_CLASS_STRUCT_* delegateCls, [MarshalAs(UnmanagedType.Bool)] ref bool pfIsOpenDelegate);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _isDelegateCreationAllowed(IntPtr _this, CORINFO_CLASS_STRUCT_* delegateHnd, CORINFO_METHOD_STRUCT_* calleeHnd);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoInstantiationVerification _isInstantiationOfVerifiedGeneric(IntPtr _this, CORINFO_METHOD_STRUCT_* method);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _initConstraintsForVerification(IntPtr _this, CORINFO_METHOD_STRUCT_* method, [MarshalAs(UnmanagedType.Bool)] ref bool pfHasCircularClassConstraints, [MarshalAs(UnmanagedType.Bool)] ref bool pfHasCircularMethodConstraint);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoCanSkipVerificationResult _canSkipMethodVerification(IntPtr _this, CORINFO_METHOD_STRUCT_* ftnHandle);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _methodMustBeLoadedBeforeCodeIsRun(IntPtr _this, CORINFO_METHOD_STRUCT_* method);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_METHOD_STRUCT_* _mapMethodDeclToMethodImpl(IntPtr _this, CORINFO_METHOD_STRUCT_* method);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _getGSCookie(IntPtr _this, GSCookie* pCookieVal, GSCookie** ppCookieVal);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _resolveToken(IntPtr _this, ref CORINFO_RESOLVED_TOKEN pResolvedToken);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _findSig(IntPtr _this, CORINFO_MODULE_STRUCT_* module, uint sigTOK, CORINFO_CONTEXT_STRUCT* context, CORINFO_SIG_INFO* sig);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _findCallSiteSig(IntPtr _this, CORINFO_MODULE_STRUCT_* module, uint methTOK, CORINFO_CONTEXT_STRUCT* context, CORINFO_SIG_INFO* sig);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_CLASS_STRUCT_* _getTokenTypeAsHandle(IntPtr _this, ref CORINFO_RESOLVED_TOKEN pResolvedToken);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoCanSkipVerificationResult _canSkipVerification(IntPtr _this, CORINFO_MODULE_STRUCT_* module);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _isValidToken(IntPtr _this, CORINFO_MODULE_STRUCT_* module, uint metaTOK);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _isValidStringRef(IntPtr _this, CORINFO_MODULE_STRUCT_* module, uint metaTOK);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _shouldEnforceCallvirtRestriction(IntPtr _this, CORINFO_MODULE_STRUCT_* scope);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoType _asCorInfoType(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate byte* _getClassName(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate int _appendClassName(IntPtr _this, short** ppBuf, ref int pnBufLen, CORINFO_CLASS_STRUCT_* cls, [MarshalAs(UnmanagedType.Bool)]bool fNamespace, [MarshalAs(UnmanagedType.Bool)]bool fFullInst, [MarshalAs(UnmanagedType.Bool)]bool fAssembly);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _isValueClass(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _canInlineTypeCheckWithObjectVTable(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate uint _getClassAttribs(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _isStructRequiringStackAllocRetBuf(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_MODULE_STRUCT_* _getClassModule(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_ASSEMBLY_STRUCT_* _getModuleAssembly(IntPtr _this, CORINFO_MODULE_STRUCT_* mod);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate byte* _getAssemblyName(IntPtr _this, CORINFO_ASSEMBLY_STRUCT_* assem);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void* _LongLifetimeMalloc(IntPtr _this, UIntPtr sz);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _LongLifetimeFree(IntPtr _this, void* obj);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate byte* _getClassModuleIdForStatics(IntPtr _this, CORINFO_CLASS_STRUCT_* cls, CORINFO_MODULE_STRUCT_** pModule, void** ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate uint _getClassSize(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate uint _getClassAlignmentRequirement(IntPtr _this, CORINFO_CLASS_STRUCT_* cls, [MarshalAs(UnmanagedType.Bool)]bool fDoubleAlignHint);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate uint _getClassGClayout(IntPtr _this, CORINFO_CLASS_STRUCT_* cls, byte* gcPtrs);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate uint _getClassNumInstanceFields(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_FIELD_STRUCT_* _getFieldInClass(IntPtr _this, CORINFO_CLASS_STRUCT_* clsHnd, int num);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _checkMethodModifier(IntPtr _this, CORINFO_METHOD_STRUCT_* hMethod, byte* modifier, [MarshalAs(UnmanagedType.Bool)]bool fOptional);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoHelpFunc _getNewHelper(IntPtr _this, ref CORINFO_RESOLVED_TOKEN pResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoHelpFunc _getNewArrHelper(IntPtr _this, CORINFO_CLASS_STRUCT_* arrayCls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoHelpFunc _getCastingHelper(IntPtr _this, ref CORINFO_RESOLVED_TOKEN pResolvedToken, [MarshalAs(UnmanagedType.I1)]bool fThrowing);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoHelpFunc _getSharedCCtorHelper(IntPtr _this, CORINFO_CLASS_STRUCT_* clsHnd);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoHelpFunc _getSecurityPrologHelper(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_CLASS_STRUCT_* _getTypeForBox(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoHelpFunc _getBoxHelper(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoHelpFunc _getUnBoxHelper(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _getReadyToRunHelper(IntPtr _this, ref CORINFO_RESOLVED_TOKEN pResolvedToken, CorInfoHelpFunc id, ref CORINFO_CONST_LOOKUP pLookup);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate byte* _getHelperName(IntPtr _this, CorInfoHelpFunc helpFunc);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoInitClassResult _initClass(IntPtr _this, CORINFO_FIELD_STRUCT_* field, CORINFO_METHOD_STRUCT_* method, CORINFO_CONTEXT_STRUCT* context, [MarshalAs(UnmanagedType.Bool)]bool speculative);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _classMustBeLoadedBeforeCodeIsRun(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_CLASS_STRUCT_* _getBuiltinClass(IntPtr _this, CorInfoClassId classId);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoType _getTypeForPrimitiveValueClass(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _canCast(IntPtr _this, CORINFO_CLASS_STRUCT_* child, CORINFO_CLASS_STRUCT_* parent);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _areTypesEquivalent(IntPtr _this, CORINFO_CLASS_STRUCT_* cls1, CORINFO_CLASS_STRUCT_* cls2);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_CLASS_STRUCT_* _mergeClasses(IntPtr _this, CORINFO_CLASS_STRUCT_* cls1, CORINFO_CLASS_STRUCT_* cls2);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_CLASS_STRUCT_* _getParentType(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoType _getChildType(IntPtr _this, CORINFO_CLASS_STRUCT_* clsHnd, ref CORINFO_CLASS_STRUCT_* clsRet);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _satisfiesClassConstraints(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _isSDArray(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate uint _getArrayRank(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void* _getArrayInitializationData(IntPtr _this, CORINFO_FIELD_STRUCT_* field, uint size);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoIsAccessAllowedResult _canAccessClass(IntPtr _this, ref CORINFO_RESOLVED_TOKEN pResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, ref CORINFO_HELPER_DESC pAccessHelper);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate byte* _getFieldName(IntPtr _this, CORINFO_FIELD_STRUCT_* ftn, byte** moduleName);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_CLASS_STRUCT_* _getFieldClass(IntPtr _this, CORINFO_FIELD_STRUCT_* field);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoType _getFieldType(IntPtr _this, CORINFO_FIELD_STRUCT_* field, ref CORINFO_CLASS_STRUCT_* structType, CORINFO_CLASS_STRUCT_* memberParent);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate uint _getFieldOffset(IntPtr _this, CORINFO_FIELD_STRUCT_* field);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.I1)]delegate bool _isWriteBarrierHelperRequired(IntPtr _this, CORINFO_FIELD_STRUCT_* field);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _getFieldInfo(IntPtr _this, ref CORINFO_RESOLVED_TOKEN pResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_ACCESS_FLAGS flags, ref CORINFO_FIELD_INFO pResult);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.I1)]delegate bool _isFieldStatic(IntPtr _this, CORINFO_FIELD_STRUCT_* fldHnd);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _getBoundaries(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn, ref uint cILOffsets, ref uint* pILOffsets, BoundaryTypes* implictBoundaries);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _setBoundaries(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn, uint cMap, OffsetMapping* pMap);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _getVars(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn, ref uint cVars, ILVarInfo** vars, [MarshalAs(UnmanagedType.U1)] ref bool extendOthers);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _setVars(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn, uint cVars, NativeVarInfo* vars);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void* _allocateArray(IntPtr _this, uint cBytes);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _freeArray(IntPtr _this, void* array);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_ARG_LIST_STRUCT_* _getArgNext(IntPtr _this, CORINFO_ARG_LIST_STRUCT_* args);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoTypeWithMod _getArgType(IntPtr _this, CORINFO_SIG_INFO* sig, CORINFO_ARG_LIST_STRUCT_* args, ref CORINFO_CLASS_STRUCT_* vcTypeRet);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_CLASS_STRUCT_* _getArgClass(IntPtr _this, CORINFO_SIG_INFO* sig, CORINFO_ARG_LIST_STRUCT_* args);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoType _getHFAType(IntPtr _this, CORINFO_CLASS_STRUCT_* hClass);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate HRESULT _GetErrorHRESULT(IntPtr _this, _EXCEPTION_POINTERS* pExceptionPointers);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate uint _GetErrorMessage(IntPtr _this, short* buffer, uint bufferLength);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate int _FilterException(IntPtr _this, _EXCEPTION_POINTERS* pExceptionPointers);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _HandleException(IntPtr _this, _EXCEPTION_POINTERS* pExceptionPointers);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _ThrowExceptionForJitResult(IntPtr _this, HRESULT result);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _ThrowExceptionForHelper(IntPtr _this, ref CORINFO_HELPER_DESC throwHelper);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _getEEInfo(IntPtr _this, ref CORINFO_EE_INFO pEEInfoOut);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.LPWStr)]delegate string _getJitTimeLogFilename(IntPtr _this);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate mdToken _getMethodDefFromMethod(IntPtr _this, CORINFO_METHOD_STRUCT_* hMethod);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate byte* _getMethodName(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn, byte** moduleName);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate uint _getMethodHash(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate byte* _findNameOfToken(IntPtr _this, CORINFO_MODULE_STRUCT_* moduleHandle, mdToken token, byte* szFQName, UIntPtr FQNameCapacity);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.I1)]delegate bool _getSystemVAmd64PassStructInRegisterDescriptor(IntPtr _this, CORINFO_CLASS_STRUCT_* structHnd, SYSTEMV_AMD64_CORINFO_STRUCT_REG_PASSING_DESCRIPTOR* structPassInRegDescPtr);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate int _getIntConfigValue(IntPtr _this, String name, int defaultValue);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate short* _getStringConfigValue(IntPtr _this, String name);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _freeStringConfigValue(IntPtr _this, short* value);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate uint _getThreadTLSIndex(IntPtr _this, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void* _getInlinedCallFrameVptr(IntPtr _this, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate int* _getAddrOfCaptureThreadGlobal(IntPtr _this, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate SIZE_T* _getAddrModuleDomainID(IntPtr _this, CORINFO_MODULE_STRUCT_* module);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void* _getHelperFtn(IntPtr _this, CorInfoHelpFunc ftnNum, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _getFunctionEntryPoint(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn, ref CORINFO_CONST_LOOKUP pResult, CORINFO_ACCESS_FLAGS accessFlags);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _getFunctionFixedEntryPoint(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn, ref CORINFO_CONST_LOOKUP pResult);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void* _getMethodSync(IntPtr _this, CORINFO_METHOD_STRUCT_* ftn, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CorInfoHelpFunc _getLazyStringLiteralHelper(IntPtr _this, CORINFO_MODULE_STRUCT_* handle);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_MODULE_STRUCT_* _embedModuleHandle(IntPtr _this, CORINFO_MODULE_STRUCT_* handle, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_CLASS_STRUCT_* _embedClassHandle(IntPtr _this, CORINFO_CLASS_STRUCT_* handle, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_METHOD_STRUCT_* _embedMethodHandle(IntPtr _this, CORINFO_METHOD_STRUCT_* handle, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_FIELD_STRUCT_* _embedFieldHandle(IntPtr _this, CORINFO_FIELD_STRUCT_* handle, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _embedGenericHandle(IntPtr _this, ref CORINFO_RESOLVED_TOKEN pResolvedToken, [MarshalAs(UnmanagedType.Bool)]bool fEmbedParent, ref CORINFO_GENERICHANDLE_RESULT pResult);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _getLocationOfThisType_Windows(IntPtr _this, CORINFO_LOOKUP_KIND* result, CORINFO_METHOD_STRUCT_* context);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_LOOKUP_KIND _getLocationOfThisType(IntPtr _this, CORINFO_METHOD_STRUCT_* context);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void* _getPInvokeUnmanagedTarget(IntPtr _this, CORINFO_METHOD_STRUCT_* method, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void* _getAddressOfPInvokeFixup(IntPtr _this, CORINFO_METHOD_STRUCT_* method, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void* _GetCookieForPInvokeCalliSig(IntPtr _this, CORINFO_SIG_INFO* szMetaSig, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.I1)]delegate bool _canGetCookieForPInvokeCalliSig(IntPtr _this, CORINFO_SIG_INFO* szMetaSig);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_JUST_MY_CODE_HANDLE_* _getJustMyCodeHandle(IntPtr _this, CORINFO_METHOD_STRUCT_* method, ref CORINFO_JUST_MY_CODE_HANDLE_** ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _GetProfilingHandle(IntPtr _this, [MarshalAs(UnmanagedType.Bool)] ref bool pbHookFunction, ref void* pProfilerHandle, [MarshalAs(UnmanagedType.Bool)] ref bool pbIndirectedHandles);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _getCallInfo(IntPtr _this, ref CORINFO_RESOLVED_TOKEN pResolvedToken, CORINFO_RESOLVED_TOKEN* pConstrainedResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_CALLINFO_FLAGS flags, ref CORINFO_CALL_INFO pResult);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _canAccessFamily(IntPtr _this, CORINFO_METHOD_STRUCT_* hCaller, CORINFO_CLASS_STRUCT_* hInstanceType);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _isRIDClassDomainID(IntPtr _this, CORINFO_CLASS_STRUCT_* cls);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate uint _getClassDomainID(IntPtr _this, CORINFO_CLASS_STRUCT_* cls, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void* _getFieldAddress(IntPtr _this, CORINFO_FIELD_STRUCT_* field, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate IntPtr _getVarArgsHandle(IntPtr _this, CORINFO_SIG_INFO* pSig, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.I1)]delegate bool _canGetVarArgsHandle(IntPtr _this, CORINFO_SIG_INFO* pSig);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate InfoAccessType _constructStringLiteral(IntPtr _this, CORINFO_MODULE_STRUCT_* module, mdToken metaTok, ref void* ppValue);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate InfoAccessType _emptyStringLiteral(IntPtr _this, ref void* ppValue);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate uint _getFieldThreadLocalStoreID(IntPtr _this, CORINFO_FIELD_STRUCT_* field, ref void* ppIndirection);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _setOverride(IntPtr _this, IntPtr pOverride, CORINFO_METHOD_STRUCT_* currentMethod);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _addActiveDependency(IntPtr _this, CORINFO_MODULE_STRUCT_* moduleFrom, CORINFO_MODULE_STRUCT_* moduleTo);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate CORINFO_METHOD_STRUCT_* _GetDelegateCtor(IntPtr _this, CORINFO_METHOD_STRUCT_* methHnd, CORINFO_CLASS_STRUCT_* clsHnd, CORINFO_METHOD_STRUCT_* targetMethodHnd, ref DelegateCtorArgs pCtorData);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _MethodCompileComplete(IntPtr _this, CORINFO_METHOD_STRUCT_* methHnd);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void* _getTailCallCopyArgsThunk(IntPtr _this, CORINFO_SIG_INFO* pSig, CorInfoHelperTailCallSpecialHandling flags);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void* _getMemoryManager(IntPtr _this);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _allocMem(IntPtr _this, uint hotCodeSize, uint coldCodeSize, uint roDataSize, uint xcptnsCount, CorJitAllocMemFlag flag, ref void* hotCodeBlock, ref void* coldCodeBlock, ref void* roDataBlock);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _reserveUnwindInfo(IntPtr _this, [MarshalAs(UnmanagedType.Bool)]bool isFunclet, [MarshalAs(UnmanagedType.Bool)]bool isColdCode, uint unwindSize);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _allocUnwindInfo(IntPtr _this, byte* pHotCode, byte* pColdCode, uint startOffset, uint endOffset, uint unwindSize, byte* pUnwindBlock, CorJitFuncKind funcKind);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void* _allocGCInfo(IntPtr _this, UIntPtr size);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _yieldExecution(IntPtr _this);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _setEHcount(IntPtr _this, uint cEH);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _setEHinfo(IntPtr _this, uint EHnumber, ref CORINFO_EH_CLAUSE clause);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        [return: MarshalAs(UnmanagedType.Bool)]delegate bool _logMsg(IntPtr _this, uint level, byte* fmt, IntPtr args);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate int _doAssert(IntPtr _this, byte* szFile, int iLine, byte* szExpr);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _reportFatalError(IntPtr _this, CorJitResult result);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate HRESULT _allocBBProfileBuffer(IntPtr _this, uint count, ref ProfileBuffer* profileBuffer);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate HRESULT _getBBProfileData(IntPtr _this, CORINFO_METHOD_STRUCT_* ftnHnd, ref uint count, ref ProfileBuffer* profileBuffer, ref uint numRuns);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _recordCallSite(IntPtr _this, uint instrOffset, CORINFO_SIG_INFO* callSig, CORINFO_METHOD_STRUCT_* methodHandle);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _recordRelocation(IntPtr _this, void* location, void* target, ushort fRelocType, ushort slotNum, int addlDelta);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate ushort _getRelocTypeHint(IntPtr _this, void* target);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate void _getModuleNativeEntryPointRange(IntPtr _this, ref void* pStart, ref void* pEnd);
        [UnmanagedFunctionPointerAttribute(CallingConvention.ThisCall)]
        delegate uint _getExpectedTargetArchitecture(IntPtr _this);

        Object[] _keepalive;

        protected IntPtr CreateUnmanagedInstance()
        {
            IntPtr * vtable = (IntPtr *)Marshal.AllocCoTaskMem(sizeof(IntPtr) * 163);
            Object[] keepalive = new Object[163];

            _keepalive = keepalive;

            var d0 = new _getMethodAttribs(getMethodAttribs);
            vtable[0] = Marshal.GetFunctionPointerForDelegate(d0);
            keepalive[0] = d0;
            var d1 = new _setMethodAttribs(setMethodAttribs);
            vtable[1] = Marshal.GetFunctionPointerForDelegate(d1);
            keepalive[1] = d1;
            var d2 = new _getMethodSig(getMethodSig);
            vtable[2] = Marshal.GetFunctionPointerForDelegate(d2);
            keepalive[2] = d2;
            var d3 = new _getMethodInfo(getMethodInfo);
            vtable[3] = Marshal.GetFunctionPointerForDelegate(d3);
            keepalive[3] = d3;
            var d4 = new _canInline(canInline);
            vtable[4] = Marshal.GetFunctionPointerForDelegate(d4);
            keepalive[4] = d4;
            var d5 = new _reportInliningDecision(reportInliningDecision);
            vtable[5] = Marshal.GetFunctionPointerForDelegate(d5);
            keepalive[5] = d5;
            var d6 = new _canTailCall(canTailCall);
            vtable[6] = Marshal.GetFunctionPointerForDelegate(d6);
            keepalive[6] = d6;
            var d7 = new _reportTailCallDecision(reportTailCallDecision);
            vtable[7] = Marshal.GetFunctionPointerForDelegate(d7);
            keepalive[7] = d7;
            var d8 = new _getEHinfo(getEHinfo);
            vtable[8] = Marshal.GetFunctionPointerForDelegate(d8);
            keepalive[8] = d8;
            var d9 = new _getMethodClass(getMethodClass);
            vtable[9] = Marshal.GetFunctionPointerForDelegate(d9);
            keepalive[9] = d9;
            var d10 = new _getMethodModule(getMethodModule);
            vtable[10] = Marshal.GetFunctionPointerForDelegate(d10);
            keepalive[10] = d10;
            var d11 = new _getMethodVTableOffset(getMethodVTableOffset);
            vtable[11] = Marshal.GetFunctionPointerForDelegate(d11);
            keepalive[11] = d11;
            var d12 = new _getIntrinsicID(getIntrinsicID);
            vtable[12] = Marshal.GetFunctionPointerForDelegate(d12);
            keepalive[12] = d12;
            var d13 = new _isInSIMDModule(isInSIMDModule);
            vtable[13] = Marshal.GetFunctionPointerForDelegate(d13);
            keepalive[13] = d13;
            var d14 = new _getUnmanagedCallConv(getUnmanagedCallConv);
            vtable[14] = Marshal.GetFunctionPointerForDelegate(d14);
            keepalive[14] = d14;
            var d15 = new _pInvokeMarshalingRequired(pInvokeMarshalingRequired);
            vtable[15] = Marshal.GetFunctionPointerForDelegate(d15);
            keepalive[15] = d15;
            var d16 = new _satisfiesMethodConstraints(satisfiesMethodConstraints);
            vtable[16] = Marshal.GetFunctionPointerForDelegate(d16);
            keepalive[16] = d16;
            var d17 = new _isCompatibleDelegate(isCompatibleDelegate);
            vtable[17] = Marshal.GetFunctionPointerForDelegate(d17);
            keepalive[17] = d17;
            var d18 = new _isDelegateCreationAllowed(isDelegateCreationAllowed);
            vtable[18] = Marshal.GetFunctionPointerForDelegate(d18);
            keepalive[18] = d18;
            var d19 = new _isInstantiationOfVerifiedGeneric(isInstantiationOfVerifiedGeneric);
            vtable[19] = Marshal.GetFunctionPointerForDelegate(d19);
            keepalive[19] = d19;
            var d20 = new _initConstraintsForVerification(initConstraintsForVerification);
            vtable[20] = Marshal.GetFunctionPointerForDelegate(d20);
            keepalive[20] = d20;
            var d21 = new _canSkipMethodVerification(canSkipMethodVerification);
            vtable[21] = Marshal.GetFunctionPointerForDelegate(d21);
            keepalive[21] = d21;
            var d22 = new _methodMustBeLoadedBeforeCodeIsRun(methodMustBeLoadedBeforeCodeIsRun);
            vtable[22] = Marshal.GetFunctionPointerForDelegate(d22);
            keepalive[22] = d22;
            var d23 = new _mapMethodDeclToMethodImpl(mapMethodDeclToMethodImpl);
            vtable[23] = Marshal.GetFunctionPointerForDelegate(d23);
            keepalive[23] = d23;
            var d24 = new _getGSCookie(getGSCookie);
            vtable[24] = Marshal.GetFunctionPointerForDelegate(d24);
            keepalive[24] = d24;
            var d25 = new _resolveToken(resolveToken);
            vtable[25] = Marshal.GetFunctionPointerForDelegate(d25);
            keepalive[25] = d25;
            var d26 = new _findSig(findSig);
            vtable[26] = Marshal.GetFunctionPointerForDelegate(d26);
            keepalive[26] = d26;
            var d27 = new _findCallSiteSig(findCallSiteSig);
            vtable[27] = Marshal.GetFunctionPointerForDelegate(d27);
            keepalive[27] = d27;
            var d28 = new _getTokenTypeAsHandle(getTokenTypeAsHandle);
            vtable[28] = Marshal.GetFunctionPointerForDelegate(d28);
            keepalive[28] = d28;
            var d29 = new _canSkipVerification(canSkipVerification);
            vtable[29] = Marshal.GetFunctionPointerForDelegate(d29);
            keepalive[29] = d29;
            var d30 = new _isValidToken(isValidToken);
            vtable[30] = Marshal.GetFunctionPointerForDelegate(d30);
            keepalive[30] = d30;
            var d31 = new _isValidStringRef(isValidStringRef);
            vtable[31] = Marshal.GetFunctionPointerForDelegate(d31);
            keepalive[31] = d31;
            var d32 = new _shouldEnforceCallvirtRestriction(shouldEnforceCallvirtRestriction);
            vtable[32] = Marshal.GetFunctionPointerForDelegate(d32);
            keepalive[32] = d32;
            var d33 = new _asCorInfoType(asCorInfoType);
            vtable[33] = Marshal.GetFunctionPointerForDelegate(d33);
            keepalive[33] = d33;
            var d34 = new _getClassName(getClassName);
            vtable[34] = Marshal.GetFunctionPointerForDelegate(d34);
            keepalive[34] = d34;
            var d35 = new _appendClassName(appendClassName);
            vtable[35] = Marshal.GetFunctionPointerForDelegate(d35);
            keepalive[35] = d35;
            var d36 = new _isValueClass(isValueClass);
            vtable[36] = Marshal.GetFunctionPointerForDelegate(d36);
            keepalive[36] = d36;
            var d37 = new _canInlineTypeCheckWithObjectVTable(canInlineTypeCheckWithObjectVTable);
            vtable[37] = Marshal.GetFunctionPointerForDelegate(d37);
            keepalive[37] = d37;
            var d38 = new _getClassAttribs(getClassAttribs);
            vtable[38] = Marshal.GetFunctionPointerForDelegate(d38);
            keepalive[38] = d38;
            var d39 = new _isStructRequiringStackAllocRetBuf(isStructRequiringStackAllocRetBuf);
            vtable[39] = Marshal.GetFunctionPointerForDelegate(d39);
            keepalive[39] = d39;
            var d40 = new _getClassModule(getClassModule);
            vtable[40] = Marshal.GetFunctionPointerForDelegate(d40);
            keepalive[40] = d40;
            var d41 = new _getModuleAssembly(getModuleAssembly);
            vtable[41] = Marshal.GetFunctionPointerForDelegate(d41);
            keepalive[41] = d41;
            var d42 = new _getAssemblyName(getAssemblyName);
            vtable[42] = Marshal.GetFunctionPointerForDelegate(d42);
            keepalive[42] = d42;
            var d43 = new _LongLifetimeMalloc(LongLifetimeMalloc);
            vtable[43] = Marshal.GetFunctionPointerForDelegate(d43);
            keepalive[43] = d43;
            var d44 = new _LongLifetimeFree(LongLifetimeFree);
            vtable[44] = Marshal.GetFunctionPointerForDelegate(d44);
            keepalive[44] = d44;
            var d45 = new _getClassModuleIdForStatics(getClassModuleIdForStatics);
            vtable[45] = Marshal.GetFunctionPointerForDelegate(d45);
            keepalive[45] = d45;
            var d46 = new _getClassSize(getClassSize);
            vtable[46] = Marshal.GetFunctionPointerForDelegate(d46);
            keepalive[46] = d46;
            var d47 = new _getClassAlignmentRequirement(getClassAlignmentRequirement);
            vtable[47] = Marshal.GetFunctionPointerForDelegate(d47);
            keepalive[47] = d47;
            var d48 = new _getClassGClayout(getClassGClayout);
            vtable[48] = Marshal.GetFunctionPointerForDelegate(d48);
            keepalive[48] = d48;
            var d49 = new _getClassNumInstanceFields(getClassNumInstanceFields);
            vtable[49] = Marshal.GetFunctionPointerForDelegate(d49);
            keepalive[49] = d49;
            var d50 = new _getFieldInClass(getFieldInClass);
            vtable[50] = Marshal.GetFunctionPointerForDelegate(d50);
            keepalive[50] = d50;
            var d51 = new _checkMethodModifier(checkMethodModifier);
            vtable[51] = Marshal.GetFunctionPointerForDelegate(d51);
            keepalive[51] = d51;
            var d52 = new _getNewHelper(getNewHelper);
            vtable[52] = Marshal.GetFunctionPointerForDelegate(d52);
            keepalive[52] = d52;
            var d53 = new _getNewArrHelper(getNewArrHelper);
            vtable[53] = Marshal.GetFunctionPointerForDelegate(d53);
            keepalive[53] = d53;
            var d54 = new _getCastingHelper(getCastingHelper);
            vtable[54] = Marshal.GetFunctionPointerForDelegate(d54);
            keepalive[54] = d54;
            var d55 = new _getSharedCCtorHelper(getSharedCCtorHelper);
            vtable[55] = Marshal.GetFunctionPointerForDelegate(d55);
            keepalive[55] = d55;
            var d56 = new _getSecurityPrologHelper(getSecurityPrologHelper);
            vtable[56] = Marshal.GetFunctionPointerForDelegate(d56);
            keepalive[56] = d56;
            var d57 = new _getTypeForBox(getTypeForBox);
            vtable[57] = Marshal.GetFunctionPointerForDelegate(d57);
            keepalive[57] = d57;
            var d58 = new _getBoxHelper(getBoxHelper);
            vtable[58] = Marshal.GetFunctionPointerForDelegate(d58);
            keepalive[58] = d58;
            var d59 = new _getUnBoxHelper(getUnBoxHelper);
            vtable[59] = Marshal.GetFunctionPointerForDelegate(d59);
            keepalive[59] = d59;
            var d60 = new _getReadyToRunHelper(getReadyToRunHelper);
            vtable[60] = Marshal.GetFunctionPointerForDelegate(d60);
            keepalive[60] = d60;
            var d61 = new _getHelperName(getHelperName);
            vtable[61] = Marshal.GetFunctionPointerForDelegate(d61);
            keepalive[61] = d61;
            var d62 = new _initClass(initClass);
            vtable[62] = Marshal.GetFunctionPointerForDelegate(d62);
            keepalive[62] = d62;
            var d63 = new _classMustBeLoadedBeforeCodeIsRun(classMustBeLoadedBeforeCodeIsRun);
            vtable[63] = Marshal.GetFunctionPointerForDelegate(d63);
            keepalive[63] = d63;
            var d64 = new _getBuiltinClass(getBuiltinClass);
            vtable[64] = Marshal.GetFunctionPointerForDelegate(d64);
            keepalive[64] = d64;
            var d65 = new _getTypeForPrimitiveValueClass(getTypeForPrimitiveValueClass);
            vtable[65] = Marshal.GetFunctionPointerForDelegate(d65);
            keepalive[65] = d65;
            var d66 = new _canCast(canCast);
            vtable[66] = Marshal.GetFunctionPointerForDelegate(d66);
            keepalive[66] = d66;
            var d67 = new _areTypesEquivalent(areTypesEquivalent);
            vtable[67] = Marshal.GetFunctionPointerForDelegate(d67);
            keepalive[67] = d67;
            var d68 = new _mergeClasses(mergeClasses);
            vtable[68] = Marshal.GetFunctionPointerForDelegate(d68);
            keepalive[68] = d68;
            var d69 = new _getParentType(getParentType);
            vtable[69] = Marshal.GetFunctionPointerForDelegate(d69);
            keepalive[69] = d69;
            var d70 = new _getChildType(getChildType);
            vtable[70] = Marshal.GetFunctionPointerForDelegate(d70);
            keepalive[70] = d70;
            var d71 = new _satisfiesClassConstraints(satisfiesClassConstraints);
            vtable[71] = Marshal.GetFunctionPointerForDelegate(d71);
            keepalive[71] = d71;
            var d72 = new _isSDArray(isSDArray);
            vtable[72] = Marshal.GetFunctionPointerForDelegate(d72);
            keepalive[72] = d72;
            var d73 = new _getArrayRank(getArrayRank);
            vtable[73] = Marshal.GetFunctionPointerForDelegate(d73);
            keepalive[73] = d73;
            var d74 = new _getArrayInitializationData(getArrayInitializationData);
            vtable[74] = Marshal.GetFunctionPointerForDelegate(d74);
            keepalive[74] = d74;
            var d75 = new _canAccessClass(canAccessClass);
            vtable[75] = Marshal.GetFunctionPointerForDelegate(d75);
            keepalive[75] = d75;
            var d76 = new _getFieldName(getFieldName);
            vtable[76] = Marshal.GetFunctionPointerForDelegate(d76);
            keepalive[76] = d76;
            var d77 = new _getFieldClass(getFieldClass);
            vtable[77] = Marshal.GetFunctionPointerForDelegate(d77);
            keepalive[77] = d77;
            var d78 = new _getFieldType(getFieldType);
            vtable[78] = Marshal.GetFunctionPointerForDelegate(d78);
            keepalive[78] = d78;
            var d79 = new _getFieldOffset(getFieldOffset);
            vtable[79] = Marshal.GetFunctionPointerForDelegate(d79);
            keepalive[79] = d79;
            var d80 = new _isWriteBarrierHelperRequired(isWriteBarrierHelperRequired);
            vtable[80] = Marshal.GetFunctionPointerForDelegate(d80);
            keepalive[80] = d80;
            var d81 = new _getFieldInfo(getFieldInfo);
            vtable[81] = Marshal.GetFunctionPointerForDelegate(d81);
            keepalive[81] = d81;
            var d82 = new _isFieldStatic(isFieldStatic);
            vtable[82] = Marshal.GetFunctionPointerForDelegate(d82);
            keepalive[82] = d82;
            var d83 = new _getBoundaries(getBoundaries);
            vtable[83] = Marshal.GetFunctionPointerForDelegate(d83);
            keepalive[83] = d83;
            var d84 = new _setBoundaries(setBoundaries);
            vtable[84] = Marshal.GetFunctionPointerForDelegate(d84);
            keepalive[84] = d84;
            var d85 = new _getVars(getVars);
            vtable[85] = Marshal.GetFunctionPointerForDelegate(d85);
            keepalive[85] = d85;
            var d86 = new _setVars(setVars);
            vtable[86] = Marshal.GetFunctionPointerForDelegate(d86);
            keepalive[86] = d86;
            var d87 = new _allocateArray(allocateArray);
            vtable[87] = Marshal.GetFunctionPointerForDelegate(d87);
            keepalive[87] = d87;
            var d88 = new _freeArray(freeArray);
            vtable[88] = Marshal.GetFunctionPointerForDelegate(d88);
            keepalive[88] = d88;
            var d89 = new _getArgNext(getArgNext);
            vtable[89] = Marshal.GetFunctionPointerForDelegate(d89);
            keepalive[89] = d89;
            var d90 = new _getArgType(getArgType);
            vtable[90] = Marshal.GetFunctionPointerForDelegate(d90);
            keepalive[90] = d90;
            var d91 = new _getArgClass(getArgClass);
            vtable[91] = Marshal.GetFunctionPointerForDelegate(d91);
            keepalive[91] = d91;
            var d92 = new _getHFAType(getHFAType);
            vtable[92] = Marshal.GetFunctionPointerForDelegate(d92);
            keepalive[92] = d92;
            var d93 = new _GetErrorHRESULT(GetErrorHRESULT);
            vtable[93] = Marshal.GetFunctionPointerForDelegate(d93);
            keepalive[93] = d93;
            var d94 = new _GetErrorMessage(GetErrorMessage);
            vtable[94] = Marshal.GetFunctionPointerForDelegate(d94);
            keepalive[94] = d94;
            var d95 = new _FilterException(FilterException);
            vtable[95] = Marshal.GetFunctionPointerForDelegate(d95);
            keepalive[95] = d95;
            var d96 = new _HandleException(HandleException);
            vtable[96] = Marshal.GetFunctionPointerForDelegate(d96);
            keepalive[96] = d96;
            var d97 = new _ThrowExceptionForJitResult(ThrowExceptionForJitResult);
            vtable[97] = Marshal.GetFunctionPointerForDelegate(d97);
            keepalive[97] = d97;
            var d98 = new _ThrowExceptionForHelper(ThrowExceptionForHelper);
            vtable[98] = Marshal.GetFunctionPointerForDelegate(d98);
            keepalive[98] = d98;
            var d99 = new _getEEInfo(getEEInfo);
            vtable[99] = Marshal.GetFunctionPointerForDelegate(d99);
            keepalive[99] = d99;
            var d100 = new _getJitTimeLogFilename(getJitTimeLogFilename);
            vtable[100] = Marshal.GetFunctionPointerForDelegate(d100);
            keepalive[100] = d100;
            var d101 = new _getMethodDefFromMethod(getMethodDefFromMethod);
            vtable[101] = Marshal.GetFunctionPointerForDelegate(d101);
            keepalive[101] = d101;
            var d102 = new _getMethodName(getMethodName);
            vtable[102] = Marshal.GetFunctionPointerForDelegate(d102);
            keepalive[102] = d102;
            var d103 = new _getMethodHash(getMethodHash);
            vtable[103] = Marshal.GetFunctionPointerForDelegate(d103);
            keepalive[103] = d103;
            var d104 = new _findNameOfToken(findNameOfToken);
            vtable[104] = Marshal.GetFunctionPointerForDelegate(d104);
            keepalive[104] = d104;
            var d105 = new _getSystemVAmd64PassStructInRegisterDescriptor(getSystemVAmd64PassStructInRegisterDescriptor);
            vtable[105] = Marshal.GetFunctionPointerForDelegate(d105);
            keepalive[105] = d105;
            var d106 = new _getIntConfigValue(getIntConfigValue);
            vtable[106] = Marshal.GetFunctionPointerForDelegate(d106);
            keepalive[106] = d106;
            var d107 = new _getStringConfigValue(getStringConfigValue);
            vtable[107] = Marshal.GetFunctionPointerForDelegate(d107);
            keepalive[107] = d107;
            var d108 = new _freeStringConfigValue(freeStringConfigValue);
            vtable[108] = Marshal.GetFunctionPointerForDelegate(d108);
            keepalive[108] = d108;
            var d109 = new _getThreadTLSIndex(getThreadTLSIndex);
            vtable[109] = Marshal.GetFunctionPointerForDelegate(d109);
            keepalive[109] = d109;
            var d110 = new _getInlinedCallFrameVptr(getInlinedCallFrameVptr);
            vtable[110] = Marshal.GetFunctionPointerForDelegate(d110);
            keepalive[110] = d110;
            var d111 = new _getAddrOfCaptureThreadGlobal(getAddrOfCaptureThreadGlobal);
            vtable[111] = Marshal.GetFunctionPointerForDelegate(d111);
            keepalive[111] = d111;
            var d112 = new _getAddrModuleDomainID(getAddrModuleDomainID);
            vtable[112] = Marshal.GetFunctionPointerForDelegate(d112);
            keepalive[112] = d112;
            var d113 = new _getHelperFtn(getHelperFtn);
            vtable[113] = Marshal.GetFunctionPointerForDelegate(d113);
            keepalive[113] = d113;
            var d114 = new _getFunctionEntryPoint(getFunctionEntryPoint);
            vtable[114] = Marshal.GetFunctionPointerForDelegate(d114);
            keepalive[114] = d114;
            var d115 = new _getFunctionFixedEntryPoint(getFunctionFixedEntryPoint);
            vtable[115] = Marshal.GetFunctionPointerForDelegate(d115);
            keepalive[115] = d115;
            var d116 = new _getMethodSync(getMethodSync);
            vtable[116] = Marshal.GetFunctionPointerForDelegate(d116);
            keepalive[116] = d116;
            var d117 = new _getLazyStringLiteralHelper(getLazyStringLiteralHelper);
            vtable[117] = Marshal.GetFunctionPointerForDelegate(d117);
            keepalive[117] = d117;
            var d118 = new _embedModuleHandle(embedModuleHandle);
            vtable[118] = Marshal.GetFunctionPointerForDelegate(d118);
            keepalive[118] = d118;
            var d119 = new _embedClassHandle(embedClassHandle);
            vtable[119] = Marshal.GetFunctionPointerForDelegate(d119);
            keepalive[119] = d119;
            var d120 = new _embedMethodHandle(embedMethodHandle);
            vtable[120] = Marshal.GetFunctionPointerForDelegate(d120);
            keepalive[120] = d120;
            var d121 = new _embedFieldHandle(embedFieldHandle);
            vtable[121] = Marshal.GetFunctionPointerForDelegate(d121);
            keepalive[121] = d121;
            var d122 = new _embedGenericHandle(embedGenericHandle);
            vtable[122] = Marshal.GetFunctionPointerForDelegate(d122);
            keepalive[122] = d122;
            if (IsWindows())
            {
                var d123 = new _getLocationOfThisType_Windows(getLocationOfThisType_Windows);
                vtable[123] = Marshal.GetFunctionPointerForDelegate(d123);
                keepalive[123] = d123;
            }
            else
            {
                var d123 = new _getLocationOfThisType(getLocationOfThisType);
                vtable[123] = Marshal.GetFunctionPointerForDelegate(d123);
                keepalive[123] = d123;
            }
            var d124 = new _getPInvokeUnmanagedTarget(getPInvokeUnmanagedTarget);
            vtable[124] = Marshal.GetFunctionPointerForDelegate(d124);
            keepalive[124] = d124;
            var d125 = new _getAddressOfPInvokeFixup(getAddressOfPInvokeFixup);
            vtable[125] = Marshal.GetFunctionPointerForDelegate(d125);
            keepalive[125] = d125;
            var d126 = new _GetCookieForPInvokeCalliSig(GetCookieForPInvokeCalliSig);
            vtable[126] = Marshal.GetFunctionPointerForDelegate(d126);
            keepalive[126] = d126;
            var d127 = new _canGetCookieForPInvokeCalliSig(canGetCookieForPInvokeCalliSig);
            vtable[127] = Marshal.GetFunctionPointerForDelegate(d127);
            keepalive[127] = d127;
            var d128 = new _getJustMyCodeHandle(getJustMyCodeHandle);
            vtable[128] = Marshal.GetFunctionPointerForDelegate(d128);
            keepalive[128] = d128;
            var d129 = new _GetProfilingHandle(GetProfilingHandle);
            vtable[129] = Marshal.GetFunctionPointerForDelegate(d129);
            keepalive[129] = d129;
            var d130 = new _getCallInfo(getCallInfo);
            vtable[130] = Marshal.GetFunctionPointerForDelegate(d130);
            keepalive[130] = d130;
            var d131 = new _canAccessFamily(canAccessFamily);
            vtable[131] = Marshal.GetFunctionPointerForDelegate(d131);
            keepalive[131] = d131;
            var d132 = new _isRIDClassDomainID(isRIDClassDomainID);
            vtable[132] = Marshal.GetFunctionPointerForDelegate(d132);
            keepalive[132] = d132;
            var d133 = new _getClassDomainID(getClassDomainID);
            vtable[133] = Marshal.GetFunctionPointerForDelegate(d133);
            keepalive[133] = d133;
            var d134 = new _getFieldAddress(getFieldAddress);
            vtable[134] = Marshal.GetFunctionPointerForDelegate(d134);
            keepalive[134] = d134;
            var d135 = new _getVarArgsHandle(getVarArgsHandle);
            vtable[135] = Marshal.GetFunctionPointerForDelegate(d135);
            keepalive[135] = d135;
            var d136 = new _canGetVarArgsHandle(canGetVarArgsHandle);
            vtable[136] = Marshal.GetFunctionPointerForDelegate(d136);
            keepalive[136] = d136;
            var d137 = new _constructStringLiteral(constructStringLiteral);
            vtable[137] = Marshal.GetFunctionPointerForDelegate(d137);
            keepalive[137] = d137;
            var d138 = new _emptyStringLiteral(emptyStringLiteral);
            vtable[138] = Marshal.GetFunctionPointerForDelegate(d138);
            keepalive[138] = d138;
            var d139 = new _getFieldThreadLocalStoreID(getFieldThreadLocalStoreID);
            vtable[139] = Marshal.GetFunctionPointerForDelegate(d139);
            keepalive[139] = d139;
            var d140 = new _setOverride(setOverride);
            vtable[140] = Marshal.GetFunctionPointerForDelegate(d140);
            keepalive[140] = d140;
            var d141 = new _addActiveDependency(addActiveDependency);
            vtable[141] = Marshal.GetFunctionPointerForDelegate(d141);
            keepalive[141] = d141;
            var d142 = new _GetDelegateCtor(GetDelegateCtor);
            vtable[142] = Marshal.GetFunctionPointerForDelegate(d142);
            keepalive[142] = d142;
            var d143 = new _MethodCompileComplete(MethodCompileComplete);
            vtable[143] = Marshal.GetFunctionPointerForDelegate(d143);
            keepalive[143] = d143;
            var d144 = new _getTailCallCopyArgsThunk(getTailCallCopyArgsThunk);
            vtable[144] = Marshal.GetFunctionPointerForDelegate(d144);
            keepalive[144] = d144;
            var d145 = new _getMemoryManager(getMemoryManager);
            vtable[145] = Marshal.GetFunctionPointerForDelegate(d145);
            keepalive[145] = d145;
            var d146 = new _allocMem(allocMem);
            vtable[146] = Marshal.GetFunctionPointerForDelegate(d146);
            keepalive[146] = d146;
            var d147 = new _reserveUnwindInfo(reserveUnwindInfo);
            vtable[147] = Marshal.GetFunctionPointerForDelegate(d147);
            keepalive[147] = d147;
            var d148 = new _allocUnwindInfo(allocUnwindInfo);
            vtable[148] = Marshal.GetFunctionPointerForDelegate(d148);
            keepalive[148] = d148;
            var d149 = new _allocGCInfo(allocGCInfo);
            vtable[149] = Marshal.GetFunctionPointerForDelegate(d149);
            keepalive[149] = d149;
            var d150 = new _yieldExecution(yieldExecution);
            vtable[150] = Marshal.GetFunctionPointerForDelegate(d150);
            keepalive[150] = d150;
            var d151 = new _setEHcount(setEHcount);
            vtable[151] = Marshal.GetFunctionPointerForDelegate(d151);
            keepalive[151] = d151;
            var d152 = new _setEHinfo(setEHinfo);
            vtable[152] = Marshal.GetFunctionPointerForDelegate(d152);
            keepalive[152] = d152;
            var d153 = new _logMsg(logMsg);
            vtable[153] = Marshal.GetFunctionPointerForDelegate(d153);
            keepalive[153] = d153;
            var d154 = new _doAssert(doAssert);
            vtable[154] = Marshal.GetFunctionPointerForDelegate(d154);
            keepalive[154] = d154;
            var d155 = new _reportFatalError(reportFatalError);
            vtable[155] = Marshal.GetFunctionPointerForDelegate(d155);
            keepalive[155] = d155;
            var d156 = new _allocBBProfileBuffer(allocBBProfileBuffer);
            vtable[156] = Marshal.GetFunctionPointerForDelegate(d156);
            keepalive[156] = d156;
            var d157 = new _getBBProfileData(getBBProfileData);
            vtable[157] = Marshal.GetFunctionPointerForDelegate(d157);
            keepalive[157] = d157;
            var d158 = new _recordCallSite(recordCallSite);
            vtable[158] = Marshal.GetFunctionPointerForDelegate(d158);
            keepalive[158] = d158;
            var d159 = new _recordRelocation(recordRelocation);
            vtable[159] = Marshal.GetFunctionPointerForDelegate(d159);
            keepalive[159] = d159;
            var d160 = new _getRelocTypeHint(getRelocTypeHint);
            vtable[160] = Marshal.GetFunctionPointerForDelegate(d160);
            keepalive[160] = d160;
            var d161 = new _getModuleNativeEntryPointRange(getModuleNativeEntryPointRange);
            vtable[161] = Marshal.GetFunctionPointerForDelegate(d161);
            keepalive[161] = d161;
            var d162 = new _getExpectedTargetArchitecture(getExpectedTargetArchitecture);
            vtable[162] = Marshal.GetFunctionPointerForDelegate(d162);
            keepalive[162] = d162;

            IntPtr instance = Marshal.AllocCoTaskMem(sizeof(IntPtr));
            *(IntPtr**)instance = vtable;
            return instance;
        }
    }
}

