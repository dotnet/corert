; Copyright (c) Microsoft. All rights reserved.
; Licensed under the MIT license. See LICENSE file in the project root for full license information.
;
; Thunk generator input file for generating the thunks from the C++ version of the 
; jit interface to COM, into managed, and from COM to C++. 
;
; The format of this file is as follows. 
; There are NORMALTYPES, RETURNTYPES, and FUNCTIONS regions
;  In the NORMALTYPES/RETURNTYPES region, each type is described. If a type is 
;  described in the NORMALTYPES section, but isn't described in the RETURNTYPES section
;  then the NORMALTYPES description can be used for a return value.
;
; TYPES have three fields
; ThunkDescriptionType,ManagedType,NativeType
;   If either ManagedType or NativeType are missing, then that form is replaced with ThunkDescriptionType. 
;   This feature allows reduction in type for enums and other types where the same type can be used in managed an native
;
;  Specification of a custom native type is done to allow multiple translations of the same native type to managed.
;  i.e.
;  REFIntPointer,ref int *,int**
;  and
;  PointerToIntPointer,int**,int**
;
; Following the TYPES sections, there is the FUNCTIONS section
; Each function that is to be part of the interface is written here. The format is basically the C++ format 
; without support for inline comments or sal annotations.
;
; Also, note that an empty line is ignored, and a line that begins with a ; is ignored.
;
; If the boilerplate around the individual functions needs adjustment, edit the thunk generator source code, and 
;    rebuild with rebuildthunkgen.cmd in the the ThunkGenerator subdir, then rebuildthunks.cmd
; If this file is editted, rebuild with rebuildthunks.cmd -- DO NOT RUN from within a razzle window.
;
NORMALTYPES
void
IEEMemoryManager*,void*
LPVOID,void*
void*
const void *,void*
HRESULT
SIZE_T*
int
INT,int
INT32,int
ULONG32,uint
ULONG,uint
DWORD,uint
unsigned,uint
unsigned int, uint
size_t,UIntPtr
SIZE_T,UIntPtr
WORD,ushort
BOOL,[MarshalAs(UnmanagedType.Bool)]bool
bool,[MarshalAs(UnmanagedType.I1)]bool
const char *,byte*
mdMethodDef,mdToken
mdToken
BYTE*,byte*
GSCookie*
GSCookie**

BOOL*,[MarshalAs(UnmanagedType.Bool)] ref bool
bool*,[MarshalAs(UnmanagedType.U1)] ref bool
ULONG*,ref uint
void **,ref void*
VOIDSTARSTAR,void **,void **
ULONG32*,ref uint
LONG*,int*
char*,byte*
const char**,byte**
WCHAR**,short**
LPCSTR,byte*
LPWSTR,short*
LPCWSTR,short*
wchar_t*,short*
const wchar_t*,String

DWORD**,ref uint*
unsigned*,ref uint
DWORD*,ref uint
CORINFO_CONST_LOOKUP*,ref CORINFO_CONST_LOOKUP
CORINFO_EH_CLAUSE*,ref CORINFO_EH_CLAUSE
const CORINFO_EH_CLAUSE*,ref CORINFO_EH_CLAUSE
CORINFO_SIG_INFO*
CORINFO_RESOLVED_TOKEN*,ref CORINFO_RESOLVED_TOKEN
CORINFO_RESOLVED_TOKEN_PTR,CORINFO_RESOLVED_TOKEN*,CORINFO_RESOLVED_TOKEN*
CORINFO_EE_INFO*,ref CORINFO_EE_INFO
CORINFO_GENERICHANDLE_RESULT*,ref CORINFO_GENERICHANDLE_RESULT
CORINFO_METHOD_INFO*,ref CORINFO_METHOD_INFO
CORINFO_FIELD_INFO*,ref CORINFO_FIELD_INFO
CORINFO_CALL_INFO*,ref CORINFO_CALL_INFO
DelegateCtorArgs*,ref DelegateCtorArgs
ICorDynamicInfo*,IntPtr
va_list,IntPtr
CORINFO_HELPER_DESC*,ref CORINFO_HELPER_DESC
const CORINFO_HELPER_DESC*,ref CORINFO_HELPER_DESC
int*,ref int
unsigned int*,ref uint

CORINFO_JUST_MY_CODE_HANDLE**,ref CORINFO_JUST_MY_CODE_HANDLE_**

ICorJitInfo::ProfileBuffer**,ref ProfileBuffer*

; Enums
CorInfoCanSkipVerificationResult
CorInfoClassId
CorInfoHelperTailCallSpecialHandling
CorInfoHelpFunc
CorInfoInitClassResult
CorInfoInline
CorInfoInstantiationVerification
CorInfoIntrinsics
CorInfoIsAccessAllowedResult
CorInfoMethodRuntimeFlags
CorInfoTailCall
CorInfoType
CorInfoTypeWithMod
CorInfoUnmanagedCallConv
InfoAccessType
CORINFO_LOOKUP_KIND
CORINFO_ACCESS_FLAGS
CORINFO_CALLINFO_FLAGS
CorJitAllocMemFlag
CorJitFuncKind
CorJitResult

; Handle types
CORINFO_MODULE_HANDLE,CORINFO_MODULE_STRUCT_*
CORINFO_METHOD_HANDLE,CORINFO_METHOD_STRUCT_*
CORINFO_FIELD_HANDLE,CORINFO_FIELD_STRUCT_*
CORINFO_CLASS_HANDLE,CORINFO_CLASS_STRUCT_*
CORINFO_ASSEMBLY_HANDLE,CORINFO_ASSEMBLY_STRUCT_*
CORINFO_JUST_MY_CODE_HANDLE,CORINFO_JUST_MY_CODE_HANDLE_*
CORINFO_MODULE_HANDLE*,ref CORINFO_MODULE_STRUCT_*
CORINFO_MODULE_HANDLE_STAR,CORINFO_MODULE_STRUCT_**,CORINFO_MODULE_STRUCT_**
CORINFO_CLASS_HANDLE*,ref CORINFO_CLASS_STRUCT_*
CORINFO_ARG_LIST_HANDLE,CORINFO_ARG_LIST_STRUCT_*
CORINFO_VARARGS_HANDLE,IntPtr
CORINFO_CONTEXT_HANDLE,CORINFO_CONTEXT_STRUCT*
SYSTEMV_AMD64_CORINFO_STRUCT_REG_PASSING_DESCRIPTOR*,SYSTEMV_AMD64_CORINFO_STRUCT_REG_PASSING_DESCRIPTOR*

ICorDebugInfo::OffsetMapping*,OffsetMapping*
ICorDebugInfo::ILVarInfo**,ILVarInfo**
ICorDebugInfo::NativeVarInfo*,NativeVarInfo*
ICorDebugInfo::BoundaryTypes*,BoundaryTypes*

struct _EXCEPTION_POINTERS*,_EXCEPTION_POINTERS*

RETURNTYPES
BOOL,[return: MarshalAs(UnmanagedType.Bool)]bool
bool,[return: MarshalAs(UnmanagedType.I1)]bool
LPCWSTR,[return: MarshalAs(UnmanagedType.LPWStr)]string
; NOTE in managed SIZE_T is an enum that is 64bits in size, and returning one of those causing mcg to do the wrong thing.
size_t,byte*,size_t

FUNCTIONS
    DWORD getMethodAttribs(        CORINFO_METHOD_HANDLE       ftn        );
    void setMethodAttribs(        CORINFO_METHOD_HANDLE       ftn,        CorInfoMethodRuntimeFlags   attribs        );
    void getMethodSig(        CORINFO_METHOD_HANDLE      ftn,        CORINFO_SIG_INFO          *sig,        CORINFO_CLASS_HANDLE      memberParent         );
    bool getMethodInfo(        CORINFO_METHOD_HANDLE   ftn,        CORINFO_METHOD_INFO*    info        );
    CorInfoInline canInline(        CORINFO_METHOD_HANDLE       callerHnd,        CORINFO_METHOD_HANDLE       calleeHnd,        DWORD*                      pRestrictions        );
    void reportInliningDecision(CORINFO_METHOD_HANDLE inlinerHnd,        CORINFO_METHOD_HANDLE inlineeHnd,        CorInfoInline inlineResult,        const char * reason);
    bool canTailCall(        CORINFO_METHOD_HANDLE   callerHnd,        CORINFO_METHOD_HANDLE   declaredCalleeHnd,        CORINFO_METHOD_HANDLE   exactCalleeHnd,        bool fIsTailPrefix        );
    void reportTailCallDecision(CORINFO_METHOD_HANDLE callerHnd,        CORINFO_METHOD_HANDLE calleeHnd,        bool fIsTailPrefix,        CorInfoTailCall tailCallResult,        const char * reason);
    void getEHinfo(        CORINFO_METHOD_HANDLE ftn,        unsigned          EHnumber,        CORINFO_EH_CLAUSE* clause        );
    CORINFO_CLASS_HANDLE getMethodClass(        CORINFO_METHOD_HANDLE       method        );
    CORINFO_MODULE_HANDLE getMethodModule(        CORINFO_METHOD_HANDLE       method        );
    void getMethodVTableOffset(        CORINFO_METHOD_HANDLE       method,        unsigned*                   offsetOfIndirection,        unsigned*                   offsetAfterIndirection        );
    CorInfoIntrinsics getIntrinsicID(        CORINFO_METHOD_HANDLE       method        );
    bool isInSIMDModule(           CORINFO_CLASS_HANDLE        classHnd );
    CorInfoUnmanagedCallConv getUnmanagedCallConv(        CORINFO_METHOD_HANDLE       method        );
    BOOL pInvokeMarshalingRequired(        CORINFO_METHOD_HANDLE       method,        CORINFO_SIG_INFO*           callSiteSig        );
    BOOL satisfiesMethodConstraints(        CORINFO_CLASS_HANDLE        parent,        CORINFO_METHOD_HANDLE       method        );
    BOOL isCompatibleDelegate(        CORINFO_CLASS_HANDLE        objCls,        CORINFO_CLASS_HANDLE        methodParentCls,        CORINFO_METHOD_HANDLE       method,        CORINFO_CLASS_HANDLE        delegateCls,        BOOL                        *pfIsOpenDelegate        );
    BOOL isDelegateCreationAllowed(        CORINFO_CLASS_HANDLE        delegateHnd,        CORINFO_METHOD_HANDLE       calleeHnd        );
    CorInfoInstantiationVerification isInstantiationOfVerifiedGeneric(        CORINFO_METHOD_HANDLE   method        );
    void initConstraintsForVerification(        CORINFO_METHOD_HANDLE   method,        BOOL *pfHasCircularClassConstraints,        BOOL *pfHasCircularMethodConstraint        );
    CorInfoCanSkipVerificationResult canSkipMethodVerification(        CORINFO_METHOD_HANDLE       ftnHandle        );
    void methodMustBeLoadedBeforeCodeIsRun(        CORINFO_METHOD_HANDLE       method        );
    CORINFO_METHOD_HANDLE mapMethodDeclToMethodImpl(        CORINFO_METHOD_HANDLE       method        );
    void getGSCookie(        GSCookie * pCookieVal,        GSCookie ** ppCookieVal        );
    void resolveToken(CORINFO_RESOLVED_TOKEN * pResolvedToken);
    void findSig(        CORINFO_MODULE_HANDLE       module,        unsigned                    sigTOK,        CORINFO_CONTEXT_HANDLE      context,        CORINFO_SIG_INFO           *sig        );
    void findCallSiteSig(        CORINFO_MODULE_HANDLE       module,unsigned                    methTOK,        CORINFO_CONTEXT_HANDLE      context,        CORINFO_SIG_INFO   *sig)
    CORINFO_CLASS_HANDLE getTokenTypeAsHandle(CORINFO_RESOLVED_TOKEN* pResolvedToken)
    CorInfoCanSkipVerificationResult canSkipVerification(CORINFO_MODULE_HANDLE module)
    BOOL isValidToken(CORINFO_MODULE_HANDLE module, unsigned metaTOK)
    BOOL isValidStringRef(CORINFO_MODULE_HANDLE module, unsigned metaTOK)
    BOOL shouldEnforceCallvirtRestriction(CORINFO_MODULE_HANDLE scope)
    CorInfoType asCorInfoType(CORINFO_CLASS_HANDLE cls)
    const char* getClassName(CORINFO_CLASS_HANDLE cls)
    int appendClassName(WCHAR** ppBuf, int* pnBufLen, CORINFO_CLASS_HANDLE cls, BOOL fNamespace, BOOL fFullInst, BOOL fAssembly)
    BOOL isValueClass(CORINFO_CLASS_HANDLE cls)
    BOOL canInlineTypeCheckWithObjectVTable(CORINFO_CLASS_HANDLE cls)
    DWORD getClassAttribs(CORINFO_CLASS_HANDLE cls)
    BOOL isStructRequiringStackAllocRetBuf(CORINFO_CLASS_HANDLE cls)
    CORINFO_MODULE_HANDLE getClassModule(CORINFO_CLASS_HANDLE cls)
    CORINFO_ASSEMBLY_HANDLE getModuleAssembly(CORINFO_MODULE_HANDLE mod)
    const char* getAssemblyName(CORINFO_ASSEMBLY_HANDLE assem)
    void* LongLifetimeMalloc(size_t sz)
    void LongLifetimeFree(void* obj)
    size_t getClassModuleIdForStatics(CORINFO_CLASS_HANDLE cls, CORINFO_MODULE_HANDLE_STAR pModule, VOIDSTARSTAR ppIndirection)
    unsigned getClassSize(CORINFO_CLASS_HANDLE cls)
    unsigned getClassAlignmentRequirement(CORINFO_CLASS_HANDLE cls, BOOL fDoubleAlignHint)
    unsigned getClassGClayout(CORINFO_CLASS_HANDLE cls, BYTE* gcPtrs)
    unsigned getClassNumInstanceFields(CORINFO_CLASS_HANDLE cls)
    CORINFO_FIELD_HANDLE getFieldInClass(CORINFO_CLASS_HANDLE clsHnd, INT num)
    BOOL checkMethodModifier(CORINFO_METHOD_HANDLE hMethod, LPCSTR modifier, BOOL fOptional)
    CorInfoHelpFunc getNewHelper(CORINFO_RESOLVED_TOKEN* pResolvedToken, CORINFO_METHOD_HANDLE callerHandle)
    CorInfoHelpFunc getNewArrHelper(CORINFO_CLASS_HANDLE arrayCls)
    CorInfoHelpFunc getCastingHelper(CORINFO_RESOLVED_TOKEN* pResolvedToken, bool fThrowing)
    CorInfoHelpFunc getSharedCCtorHelper(CORINFO_CLASS_HANDLE clsHnd)
    CorInfoHelpFunc getSecurityPrologHelper(CORINFO_METHOD_HANDLE ftn)
    CORINFO_CLASS_HANDLE getTypeForBox(CORINFO_CLASS_HANDLE cls)
    CorInfoHelpFunc getBoxHelper(CORINFO_CLASS_HANDLE cls)
    CorInfoHelpFunc getUnBoxHelper(CORINFO_CLASS_HANDLE cls)
    void getReadyToRunHelper(CORINFO_RESOLVED_TOKEN * pResolvedToken, CorInfoHelpFunc id, CORINFO_CONST_LOOKUP *pLookup)
    const char* getHelperName(CorInfoHelpFunc helpFunc)
    CorInfoInitClassResult initClass(CORINFO_FIELD_HANDLE field, CORINFO_METHOD_HANDLE method, CORINFO_CONTEXT_HANDLE context, BOOL speculative)
    void classMustBeLoadedBeforeCodeIsRun(CORINFO_CLASS_HANDLE cls)
    CORINFO_CLASS_HANDLE getBuiltinClass(CorInfoClassId classId)
    CorInfoType getTypeForPrimitiveValueClass(CORINFO_CLASS_HANDLE cls)
    BOOL canCast(CORINFO_CLASS_HANDLE child, CORINFO_CLASS_HANDLE parent)
    BOOL areTypesEquivalent(CORINFO_CLASS_HANDLE cls1, CORINFO_CLASS_HANDLE cls2)
    CORINFO_CLASS_HANDLE mergeClasses(CORINFO_CLASS_HANDLE cls1, CORINFO_CLASS_HANDLE cls2)
    CORINFO_CLASS_HANDLE getParentType(CORINFO_CLASS_HANDLE cls)
    CorInfoType getChildType(CORINFO_CLASS_HANDLE clsHnd, CORINFO_CLASS_HANDLE* clsRet)
    BOOL satisfiesClassConstraints(CORINFO_CLASS_HANDLE cls)
    BOOL isSDArray(CORINFO_CLASS_HANDLE cls)
    unsigned getArrayRank(CORINFO_CLASS_HANDLE cls)
    void* getArrayInitializationData(CORINFO_FIELD_HANDLE field, DWORD size)
    CorInfoIsAccessAllowedResult canAccessClass(CORINFO_RESOLVED_TOKEN* pResolvedToken, CORINFO_METHOD_HANDLE callerHandle, CORINFO_HELPER_DESC* pAccessHelper)
    const char* getFieldName(CORINFO_FIELD_HANDLE ftn, const char** moduleName)
    CORINFO_CLASS_HANDLE getFieldClass(CORINFO_FIELD_HANDLE field)
    CorInfoType getFieldType(CORINFO_FIELD_HANDLE field, CORINFO_CLASS_HANDLE* structType, CORINFO_CLASS_HANDLE memberParent)
    unsigned getFieldOffset(CORINFO_FIELD_HANDLE field)
    bool isWriteBarrierHelperRequired(CORINFO_FIELD_HANDLE field)
    void getFieldInfo(CORINFO_RESOLVED_TOKEN* pResolvedToken, CORINFO_METHOD_HANDLE callerHandle, CORINFO_ACCESS_FLAGS flags, CORINFO_FIELD_INFO* pResult)
    bool isFieldStatic(CORINFO_FIELD_HANDLE fldHnd)
    void getBoundaries(CORINFO_METHOD_HANDLE ftn, unsigned int* cILOffsets, DWORD** pILOffsets, ICorDebugInfo::BoundaryTypes* implictBoundaries)
    void setBoundaries(CORINFO_METHOD_HANDLE ftn, ULONG32 cMap, ICorDebugInfo::OffsetMapping* pMap)
    void getVars(CORINFO_METHOD_HANDLE ftn, ULONG32* cVars, ICorDebugInfo::ILVarInfo** vars, bool* extendOthers)
    void setVars(CORINFO_METHOD_HANDLE ftn, ULONG32 cVars, ICorDebugInfo::NativeVarInfo* vars)
    void*allocateArray(ULONG cBytes);
    void freeArray(void*array);
    CORINFO_ARG_LIST_HANDLE getArgNext(CORINFO_ARG_LIST_HANDLE args);
    CorInfoTypeWithMod getArgType(CORINFO_SIG_INFO* sig, CORINFO_ARG_LIST_HANDLE args, CORINFO_CLASS_HANDLE* vcTypeRet);
    CORINFO_CLASS_HANDLE getArgClass(CORINFO_SIG_INFO* sig, CORINFO_ARG_LIST_HANDLE args);
    CorInfoType getHFAType(CORINFO_CLASS_HANDLE hClass);
    HRESULT GetErrorHRESULT(struct _EXCEPTION_POINTERS *pExceptionPointers);
    ULONG GetErrorMessage(LPWSTR buffer, ULONG bufferLength);
    int FilterException(struct _EXCEPTION_POINTERS* pExceptionPointers);
    void HandleException(struct _EXCEPTION_POINTERS* pExceptionPointers);
    void ThrowExceptionForJitResult(HRESULT result);
    void ThrowExceptionForHelper(const CORINFO_HELPER_DESC* throwHelper);
    void getEEInfo(CORINFO_EE_INFO* pEEInfoOut);
    LPCWSTR getJitTimeLogFilename();
    mdMethodDef getMethodDefFromMethod(CORINFO_METHOD_HANDLE hMethod);
    const char* getMethodName(CORINFO_METHOD_HANDLE ftn, const char **moduleName);
    unsigned getMethodHash(CORINFO_METHOD_HANDLE       ftn);
    size_t findNameOfToken(CORINFO_MODULE_HANDLE       moduleHandle,mdToken                     token, char * szFQName,size_t FQNameCapacity);
    bool getSystemVAmd64PassStructInRegisterDescriptor(CORINFO_CLASS_HANDLE  structHnd, SYSTEMV_AMD64_CORINFO_STRUCT_REG_PASSING_DESCRIPTOR* structPassInRegDescPtr);
    int getIntConfigValue(const wchar_t *name, int defaultValue);
    wchar_t *getStringConfigValue(const wchar_t *name);
    void freeStringConfigValue(wchar_t *value);
    DWORD getThreadTLSIndex(void                  **ppIndirection);
    const void * getInlinedCallFrameVptr(void **ppIndirection);
    LONG * getAddrOfCaptureThreadGlobal(void                  **ppIndirection);
    SIZE_T*       getAddrModuleDomainID(CORINFO_MODULE_HANDLE   module);
    void* getHelperFtn (CorInfoHelpFunc         ftnNum, void                  **ppIndirection);
    void getFunctionEntryPoint(CORINFO_METHOD_HANDLE   ftn, CORINFO_CONST_LOOKUP *  pResult, CORINFO_ACCESS_FLAGS accessFlags);
    void getFunctionFixedEntryPoint(CORINFO_METHOD_HANDLE   ftn, CORINFO_CONST_LOOKUP *  pResult);
    void* getMethodSync(CORINFO_METHOD_HANDLE               ftn, void                  **ppIndirection);
    CorInfoHelpFunc getLazyStringLiteralHelper(CORINFO_MODULE_HANDLE   handle);
    CORINFO_MODULE_HANDLE embedModuleHandle(CORINFO_MODULE_HANDLE   handle, void                  **ppIndirection);
    CORINFO_CLASS_HANDLE embedClassHandle(CORINFO_CLASS_HANDLE    handle, void                  **ppIndirection);
    CORINFO_METHOD_HANDLE embedMethodHandle(CORINFO_METHOD_HANDLE   handle, void                  **ppIndirection);
    CORINFO_FIELD_HANDLE embedFieldHandle(CORINFO_FIELD_HANDLE    handle, void                  **ppIndirection);
    void embedGenericHandle(CORINFO_RESOLVED_TOKEN *        pResolvedToken, BOOL fEmbedParent, CORINFO_GENERICHANDLE_RESULT *  pResult);
    CORINFO_LOOKUP_KIND getLocationOfThisType(CORINFO_METHOD_HANDLE context);
    void* getPInvokeUnmanagedTarget(CORINFO_METHOD_HANDLE   method, void                  **ppIndirection);
    void* getAddressOfPInvokeFixup(CORINFO_METHOD_HANDLE   method, void                  **ppIndirection);
    LPVOID GetCookieForPInvokeCalliSig(CORINFO_SIG_INFO* szMetaSig, void           ** ppIndirection);
    bool canGetCookieForPInvokeCalliSig(CORINFO_SIG_INFO* szMetaSig);
    CORINFO_JUST_MY_CODE_HANDLE getJustMyCodeHandle(CORINFO_METHOD_HANDLE       method, CORINFO_JUST_MY_CODE_HANDLE**ppIndirection);
    void GetProfilingHandle(BOOL *pbHookFunction, void **pProfilerHandle, BOOL *pbIndirectedHandles);
    void getCallInfo(CORINFO_RESOLVED_TOKEN * pResolvedToken, CORINFO_RESOLVED_TOKEN_PTR pConstrainedResolvedToken, CORINFO_METHOD_HANDLE   callerHandle, CORINFO_CALLINFO_FLAGS  flags, CORINFO_CALL_INFO       *pResult);
    BOOL canAccessFamily(CORINFO_METHOD_HANDLE hCaller, CORINFO_CLASS_HANDLE hInstanceType);
    BOOL isRIDClassDomainID(CORINFO_CLASS_HANDLE cls);
    unsigned getClassDomainID (CORINFO_CLASS_HANDLE    cls, void                  **ppIndirection);
    void* getFieldAddress(CORINFO_FIELD_HANDLE    field, void                  **ppIndirection);
    CORINFO_VARARGS_HANDLE getVarArgsHandle(CORINFO_SIG_INFO       *pSig, void                  **ppIndirection);
    bool canGetVarArgsHandle(CORINFO_SIG_INFO       *pSig);
    InfoAccessType constructStringLiteral(CORINFO_MODULE_HANDLE   module, mdToken                 metaTok, void                  **ppValue);
    InfoAccessType emptyStringLiteral(void                  **ppValue);
    DWORD getFieldThreadLocalStoreID (CORINFO_FIELD_HANDLE    field, void                  **ppIndirection);
    void setOverride(ICorDynamicInfo             *pOverride, CORINFO_METHOD_HANDLE       currentMethod);
    void addActiveDependency(CORINFO_MODULE_HANDLE       moduleFrom, CORINFO_MODULE_HANDLE       moduleTo);
    CORINFO_METHOD_HANDLE GetDelegateCtor(CORINFO_METHOD_HANDLE  methHnd, CORINFO_CLASS_HANDLE   clsHnd, CORINFO_METHOD_HANDLE  targetMethodHnd, DelegateCtorArgs *     pCtorData);
    void MethodCompileComplete(CORINFO_METHOD_HANDLE methHnd);
    void* getTailCallCopyArgsThunk (CORINFO_SIG_INFO       *pSig, CorInfoHelperTailCallSpecialHandling flags);
    IEEMemoryManager* getMemoryManager();
    void allocMem(        ULONG               hotCodeSize,    ULONG               coldCodeSize,     ULONG               roDataSize,             ULONG               xcptnsCount,            CorJitAllocMemFlag  flag,        void**             hotCodeBlock,           void**             coldCodeBlock,          void**             roDataBlock             );
    void reserveUnwindInfo(BOOL isFunclet, BOOL isColdCode, ULONG unwindSize)
    void allocUnwindInfo(BYTE* pHotCode, BYTE* pColdCode, ULONG startOffset, ULONG endOffset, ULONG unwindSize, BYTE* pUnwindBlock, CorJitFuncKind funcKind)
    void* allocGCInfo(size_t size)
    void yieldExecution()
    void setEHcount(unsigned cEH)
    void setEHinfo(unsigned EHnumber, const CORINFO_EH_CLAUSE* clause)
    BOOL logMsg(unsigned level, const char* fmt, va_list args)
    int doAssert(const char* szFile, int iLine, const char* szExpr)
    void reportFatalError(CorJitResult result)
    HRESULT allocBBProfileBuffer(ULONG count, ICorJitInfo::ProfileBuffer** profileBuffer)
    HRESULT getBBProfileData(CORINFO_METHOD_HANDLE ftnHnd, ULONG* count, ICorJitInfo::ProfileBuffer** profileBuffer, ULONG* numRuns)
    void recordCallSite(ULONG instrOffset, CORINFO_SIG_INFO* callSig, CORINFO_METHOD_HANDLE methodHandle)
    void recordRelocation(void* location, void* target, WORD fRelocType, WORD slotNum, INT32 addlDelta)
    WORD getRelocTypeHint(void* target)
    void getModuleNativeEntryPointRange(void** pStart, void** pEnd)
    DWORD getExpectedTargetArchitecture()
