<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <IlcBuildTasksPath Condition="'$(IlcBuildTasksPath)' == ''">$(MSBuildThisFileDirectory)..\tools\netstandard\ILCompiler.Build.Tasks.dll</IlcBuildTasksPath>
    
    <!--
      Prevent dotnet CLI from deploying the CoreCLR shim executable since we produce
      a native executable.
    -->
    <DeployAppHost Condition="'$(NativeCodeGen)' != 'readytorun'">false</DeployAppHost>
  </PropertyGroup>

  <Target Name="_ComputeIlcCompileInputs"
          BeforeTargets="ComputeIlcCompileInputs"
          DependsOnTargets="$(IlcDynamicBuildPropertyDependencies)">
    <ItemGroup>
      <IlcReference Include="@(_ManagedResolvedAssembliesToPublish)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <ComputeLinkedFilesToPublishDependsOn Condition="'$(NativeCodeGen)' != 'readytorun'">LinkNative</ComputeLinkedFilesToPublishDependsOn>
    <ComputeLinkedFilesToPublishDependsOn Condition="'$(NativeCodeGen)' == 'readytorun'">BuildAllReadyToRunAssemblies</ComputeLinkedFilesToPublishDependsOn>
  </PropertyGroup>

  <Import Project="Microsoft.NETCore.Native.ReadyToRun.targets" Condition="'$(NativeCodeGen)' == 'readytorun'" />
  
  <!--
    This target hooks into the dotnet CLI publish pipeline. That pipeline has
    a target called ComputeFilesToPublish which produces the ItemGroup
    ResolvedFileToPublish based on the inputs of @(IntermediateAssembly)
    and @(ResolvedAssembliesToPublish). We modify those two item groups
    to control what gets published after CoreRT optimizes the application.

    For .NET Core 3.0, the property has been renamed to _ResolvedCopyLocalPublishAssets
    in https://github.com/dotnet/sdk/pull/2646.
  -->
  <Target Name="ComputeLinkedFilesToPublish"
          BeforeTargets="ComputeFilesToPublish"
          DependsOnTargets="_ComputeAssembliesToCompileToNative;$(ComputeLinkedFilesToPublishDependsOn)">
    
    <ItemGroup>
      <ResolvedAssembliesToPublish Remove="@(_AssembliesToSkipPublish)" />
      <ResolvedAssembliesToPublish Include="@(_LinkedResolvedAssemblies)" />

      <_ResolvedCopyLocalPublishAssets Remove="@(_AssembliesToSkipPublish)" />
      <_ResolvedCopyLocalPublishAssets Include="@(_LinkedResolvedAssemblies)" />

      <ResolvedAssembliesToPublish Include="@(ReadyToRunOutputAssembliesToPublish)" />
      <_ResolvedCopyLocalPublishAssets Include="@(ReadyToRunOutputAssembliesToPublish)" />
    </ItemGroup>
    
    <ItemGroup>
      <_NativeIntermediateAssembly Include="@(IntermediateAssembly->'$(NativeIntermediateOutputPath)%(Filename)%(Extension)')" Condition="'$(NativeCodeGen)' == 'readytorun'" />
      <_NativeIntermediateAssembly Include="@(IntermediateAssembly->'$(NativeOutputPath)%(Filename)$(NativeBinaryExt)')" Condition="'$(NativeCodeGen)' != 'readytorun'" />
      <IntermediateAssembly Remove="@(IntermediateAssembly)" />
      <IntermediateAssembly Include="@(_NativeIntermediateAssembly)" />
    </ItemGroup>
  </Target>
  
  <!--
    Filter the input publish file list selecting managed assemblies for compilation.
    Also produces _AssembliesToSkipPublish which chops out things from the publish
    pipeline we don't want to see in the output (native images, CoreCLR artifacts)
    until we get a proper AOT NetCore app package.
  -->
  <UsingTask TaskName="ComputeManagedAssemblies" AssemblyFile="$(IlcBuildTasksPath)" />
  <Target Name="_ComputeAssembliesToCompileToNative" DependsOnTargets="$(IlcDynamicBuildPropertyDependencies)">

    <!-- Fail with descriptive error message for common mistake. -->
    <Error Condition="'$(RuntimeIdentifier)' == ''" Text="RuntimeIdentifier is required for native compilation. Try running dotnet publish with the -r option value specified." />

    <!-- Fail with descriptive error message for common unsupported cases. -->
    <Error Condition="'$(DisableUnsupportedError)' != 'true' and '$(OS)' == 'Windows_NT' and !$(RuntimeIdentifier.StartsWith('win'))" Text="Cross-compilation is not supported yet. https://github.com/dotnet/corert/issues/5458" />
    <Error Condition="'$(DisableUnsupportedError)' != 'true' and '$(OS)' != 'Windows_NT' and $(RuntimeIdentifier.StartsWith('win'))" Text="Cross-compilation is not supported yet. https://github.com/dotnet/corert/issues/5458" />
    <Error Condition="'$(DisableUnsupportedError)' != 'true' and !$(RuntimeIdentifier.EndsWith('x64'))" Text="$(RuntimeIdentifier) not supported yet. https://github.com/dotnet/corert/issues/4589" />

    <!-- CoreRT SDK and Framework Assemblies need to be defined to avoid CoreCLR implementations being set as compiler inputs -->  
    <Error Condition="'@(PrivateSdkAssemblies)' == ''" Text="The PrivateSdkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative" />
    <Error Condition="'@(FrameworkAssemblies)' == ''" Text="The FrameworkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative" />

    <ComputeManagedAssemblies Assemblies="@(ResolvedAssembliesToPublish);@(_ResolvedCopyLocalPublishAssets)"
    DotNetAppHostExecutableName="$(_DotNetAppHostExecutableName)" DotNetHostFxrLibraryName="$(_DotNetHostFxrLibraryName)" DotNetHostPolicyLibraryName="$(_DotNetHostPolicyLibraryName)"
    SdkAssemblies="@(PrivateSdkAssemblies)" FrameworkAssemblies="@(FrameworkAssemblies)" CompilationMode="$(NativeCodeGen)">
      <Output TaskParameter="ManagedAssemblies" ItemName="_ManagedResolvedAssembliesToPublish" />
      <Output TaskParameter="AssembliesToSkipPublish" ItemName="_AssembliesToSkipPublish" />
    </ComputeManagedAssemblies>
    
    <ItemGroup>
      <ReadyToRunAssemblies Condition="'$(NativeCodeGen)' == 'readytorun'" Include="@(_ManagedResolvedAssembliesToPublish);@(IntermediateAssembly)" />
      <ReadyToRunAssembliesToReference Condition="'$(NativeCodeGen)' == 'readytorun'" Include="@(ReadyToRunAssemblies)" />
      <ReadyToRunOutputAssembliesToPublish Include="@(_ManagedResolvedAssembliesToPublish->'$(NativeIntermediateOutputPath)%(Filename)%(Extension)')" Condition="'$(NativeCodeGen)' == 'readytorun'" />
    </ItemGroup>
    
  </Target>

  <Target Name="CopyNativePdb" Condition="'$(DebugType)' != 'None' and '$(TargetOS)' == 'Windows_NT' and '$(NativeLib)' != 'Static' and '$(NativeCodeGen)' != 'readytorun'" AfterTargets="Publish">
    <!-- dotnet CLI produces managed debug symbols - substitute with those we generated during native compilation -->
    <Delete Files="$(PublishDir)\$(TargetName).pdb"/>    
    <Copy SourceFiles="$(NativeOutputPath)$(TargetName).pdb" DestinationFolder="$(PublishDir)" />  
  </Target>

</Project>
