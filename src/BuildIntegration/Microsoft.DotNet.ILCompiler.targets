<Project 
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <DeployAppHost>false</DeployAppHost>
    <_ILCompilerPackageRootDir>$(MSBuildThisFileDirectory)../</_ILCompilerPackageRootDir>
    <IlcBuildIntegrationTargetsDir>$(_ILCompilerPackageRootDir)targets/</IlcBuildIntegrationTargetsDir>
   
    <!-- Workaround for lack of current host OS detection - https://github.com/Microsoft/msbuild/issues/539 -->
    <TargetOS Condition="'$(TargetOS)' == '' and '$(OS)' == 'Unix' and Exists('/Applications')">OSX</TargetOS>
    <!-- The correct OS detection code. Uncomment once CI machines are upgraded to the latest version of MSBuild -->
    <!-- <TargetOS Condition="'$([MSBuild]::IsOSPlatform(OSX))' == 'true'">OSX</TargetOS>  -->
    <TargetOS Condition="'$(TargetOS)' == ''">$(OS)</TargetOS>
    
    <IlcTargetRuntimeIdentifier Condition="'$(TargetOS)' == 'Windows_NT'">win-x64</IlcTargetRuntimeIdentifier>
    <IlcTargetRuntimeIdentifier Condition="'$(TargetOS)' == 'Unix'">linux-x64</IlcTargetRuntimeIdentifier>
    <IlcTargetRuntimeIdentifier Condition="'$(TargetOS)' == 'OSX'">osx-x64</IlcTargetRuntimeIdentifier>

    <!-- Part of workaround for lack of secondary build artifact import - https://github.com/Microsoft/msbuild/issues/2807 -->
    <!-- Define the name of the runtime specific compiler package to import -->
    <RuntimeIlcPackageName Condition="'$(IlcTargetRuntimeIdentifier)' != ''">runtime.$(IlcTargetRuntimeIdentifier).Microsoft.DotNet.ILCompiler</RuntimeIlcPackageName>
    <IlcCalledViaPackage>true</IlcCalledViaPackage>
   
    <!-- If CoreRT is being consumed via its package, runtime-specific properties must be set before compilation can proceed -->
    <ImportRuntimeILCompilerPackageTargetDependsOn>RunResolvePackageDependencies</ImportRuntimeILCompilerPackageTargetDependsOn>
    <IlcSetupPropertiesDependsOn>ImportRuntimeILCompilerPackageTarget</IlcSetupPropertiesDependsOn>
    <IlcDynamicBuildPropertyDependencies>SetupProperties</IlcDynamicBuildPropertyDependencies>
    
  </PropertyGroup>

  <!-- Part of workaround for lack of secondary build artifact import - https://github.com/Microsoft/msbuild/issues/2807 -->
  <!-- Locate the runtime package according to the current target runtime -->
  <Target Name="ImportRuntimeILCompilerPackageTarget" Condition="'$(BuildingFrameworkLibrary)' != 'true' AND $(IlcCalledViaPackage) == 'true'" DependsOnTargets="$(ImportRuntimeILCompilerPackageTargetDependsOn)" BeforeTargets="Publish">
    <!-- CoreRT SDK and Framework Assemblies need to be defined to avoid CoreCLR implementations being set as compiler inputs -->
    <Error Condition="'@(PackageDefinitions)' == ''" Text="The PackageDefinitions ItemGroup is required for target ImportRuntimeILCompilerPackageTarget" />
    <ItemGroup>
      <RuntimePackage Include="@(PackageDefinitions)" Condition="'%(PackageDefinitions.Name)' == '$(RuntimeIlcPackageName)'" />
    </ItemGroup>
    <CreateProperty Value="%(RuntimePackage.ResolvedPath)">
      <Output TaskParameter="Value" PropertyName="RuntimePackagePath"/>
    </CreateProperty>
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)\..\targets\Microsoft.NETCore.Native.targets" />  
</Project>
