// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;

using Debug = System.Diagnostics.Debug;

namespace Internal.Runtime
{
    /// <summary>
    /// Helper class to create exceptions. This is expected to be used from two places:
    /// from the throw helpers generated by the compiler after encountering a method that fails to
    /// compile, and from the runtime type loader (living in a universe with a separate
    /// System.Object) to create classlib exceptions.
    /// </summary>
    internal static class TypeLoaderExceptionHelper
    {
        public static Exception CreateTypeLoadException(ExceptionStringID id, string typeName, string moduleName, string messageArg)
        {
            return new TypeLoadException(SR.Format(GetFormatString(id), typeName, moduleName, messageArg), typeName);
        }

        public static Exception CreateMissingFieldException(ExceptionStringID id, string fieldName)
        {
            return new MissingFieldException(SR.Format(GetFormatString(id), fieldName));
        }

        public static Exception CreateMissingMethodException(ExceptionStringID id, string methodName)
        {
            throw new MissingMethodException(SR.Format(GetFormatString(id), methodName));
        }

        public static Exception CreateFileLoadException(ExceptionStringID id, string fileName)
        {
            throw new System.IO.FileLoadException(SR.Format(GetFormatString(id), fileName));
        }

        // TODO: move to a place where we can share this with the compiler
        private static string GetFormatString(ExceptionStringID id)
        {
            switch (id)
            {
                case ExceptionStringID.ClassLoadGeneral:
                    return SR.ClassLoad_General;
                case ExceptionStringID.ClassLoadMissingMethodRva:
                    return SR.ClassLoad_MissingMethodRva;
                case ExceptionStringID.EeMissingField:
                    return SR.EE_MissingField;
                case ExceptionStringID.EeMissingMethod:
                    return SR.EE_MissingMethod;
                case ExceptionStringID.EeFileLoadErrorGeneric:
                    return SR.EE_FileLoadErrorGeneric;
                default:
                    Debug.Assert(false);
                    throw new NotImplementedException();
            }
        }
    }
}
