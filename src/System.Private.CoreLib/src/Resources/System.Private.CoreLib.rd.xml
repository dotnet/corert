<?xml version="1.0" encoding="utf-8" ?>
<Directives xmlns="http://schemas.microsoft.com/netfx/2013/01/metadata">
  <Library Name="*System.Private.CoreLib*">
    <Assembly Name="System.Private.CoreLib">
      <Namespace Name="System">
        <Namespace Name="Collections">
          <Namespace Name="Generic">
            <Type Name="IDictionary{TKey,TValue}">
              <ImpliesType Name="System.Collections.Generic.Dictionary{TKey,TValue}" Serialize="Public"/>
            </Type>
            <Type Name="IList{T}">
              <ImpliesType Name="System.Collections.Generic.List{T}" Serialize="Public"/>
              <ImpliesType Name="T[]" Serialize="Public"/>
            </Type>
            <Type Name="IEnumerable{T}">
              <ImpliesType Name="System.Collections.Generic.List{T}" Serialize="Public"/>
              <ImpliesType Name="T[]" Serialize="Public"/>
            </Type>
            <Type Name="ICollection{T}">
              <ImpliesType Name="System.Collections.Generic.List{T}" Serialize="Public"/>
              <ImpliesType Name="T[]" Serialize="Public"/>
            </Type>
            <Type Name="IReadOnlyCollection{T}">
              <ImpliesType Name="System.Collections.Generic.List{T}" Serialize="Public"/>
              <ImpliesType Name="T[]" Serialize="Public"/>
            </Type>
            <Type Name="IReadOnlyList{T}">
              <ImpliesType Name="System.Collections.Generic.List{T}" Serialize="Public"/>
              <ImpliesType Name="T[]" Serialize="Public"/>
            </Type>
          </Namespace>
        </Namespace>
        <Namespace Name="ComponentModel">
          <Type Name="DefaultValueAttribute">
            <Method Name=".ctor">
              <TypeParameter Name="type" Serialize="Public"/>
            </Method>
          </Type>
        </Namespace>
        <Type Name="Activator">
          <Method Name="CreateInstance">
            <TypeParameter Name="type" Activate="Public"/>
          </Method>
        </Type>
        <Type Name="Array">
          <Method Name="CreateInstance">
            <TypeParameter Name="elementType" Browse="Public"/>
            <!--
            <TypeParameter Name="elementType" Type="MakeArray(System.Type)" Activate="Public"/>
            -->
          </Method>
        </Type>
        <Type Name="Enum">
          <Method Name="IsDefined">
            <TypeParameter Name="enumType" Serialize="Public"/>
          </Method>
          <Method Name="Parse">
            <TypeParameter Name="enumType" Serialize="Public"/>
          </Method>
          <Method Name="TryParse&lt;TEnum&gt;">
            <GenericParameter Name="TEnum" Serialize="Public"/>
          </Method>
          <Method Name="GetValues">
            <TypeParameter Name="enumType" Serialize="Public"/>
          </Method>
          <Method Name="GetNames">
            <TypeParameter Name="enumType" Serialize="Public"/>
          </Method>
          <Method Name="GetName">
            <TypeParameter Name="enumType" Serialize="Public"/>
          </Method>
          <Method Name="Format">
            <TypeParameter Name="enumType" Serialize="Public"/>
          </Method>
        </Type>
        <!-- Reflecting over exceptions is common in logging libraries. -->
        <Type Name="Exception">
          <Subtypes Browse="All" />
        </Type>
        <Type Name="Type">
          <Method Name="MakeArrayType">
            <!-- <TypeParameter Name="this" Type="MakeArray(System.Type)" Activate="Public"/>-->
          </Method>
        </Type>
        <!-- System.Guid is well known to the serializers and must not be explicitly specified to sg.exe -->
        <Type Name="Guid" DataContractJsonSerializer="Excluded" DataContractSerializer="Excluded"/>
        <!-- System.TimeSpan is well known to the serializers and must not be explicitly specified to sg.exe -->
        <Type Name="TimeSpan" DataContractJsonSerializer="Excluded" DataContractSerializer="Excluded"/>
      </Namespace>
      <Namespace Name="System.Reflection">
        <Type Name="MethodInfo">
          <Method Name="CreateDelegate">
            <TypeParameter Name="delegateType" Activate="Public"/>
          </Method>
        </Type>
        <!-- Do not remove to avoid breaking missing metadata logging -->
        <Type Name="MissingMetadataException" Browse="Public" />
      </Namespace>
      <Namespace Name="System.Diagnostics.Tracing">
        <Type Name="EventSourceAttribute" Dynamic="Required All">
          <AttributeImplies Serialize="Required Public"/>
        </Type>
        <Type Name="EventDataAttribute" Dynamic="Required All">
          <AttributeImplies Serialize="Required Public"/>
        </Type>
        <Type Name="EventAttribute" Dynamic="Required All"/>
        <Type Name="EventSource">
          <Method Name="Write{T}">
            <GenericParameter Name="T" Serialize="Required Public"/>
          </Method>
          <Subtypes Dynamic="Required Public"/>
        </Type>
        <Type Name="PropertyValue.ReferenceTypeHelper{System.Object}" Dynamic="Required Public"/>
      </Namespace>
    </Assembly>
    
    <!-- The toolchain injects this after analysis, so it doesn't get marked automatically,
         but it's intended to be visible to reflection. Not having metadata for it triggers exceptions
         from calls like Assembly.GetCustomAttributes. -->
    <Type Name="Internal.Runtime.CompilerServices.HasEmbeddedStringResourcesAttribute" Dynamic="Required Public" />
  </Library>
</Directives>
