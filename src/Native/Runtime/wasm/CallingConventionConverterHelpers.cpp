// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// TODO: Implement these. See CallingConventionConverterHelpers.s under other architectures for how
// each function should work. This file should ideally be pure WebAssembly for better speed.

#include <AsmOffsets.inc>         // generated by the build from AsmOffsets.cpp
#include <cassert>

extern "C" void CallingConventionConverter_ReturnVoidReturnThunk()
{
    assert(false);
}

extern "C" int CallingConventionConverter_ReturnIntegerReturnThunk(int)
{
    assert(false);
}

//
// __jmpstub__CallingConventionConverter_CommonCallingStub
//
struct CallingConventionConverter_CommonCallingStub_PointerData
{
    void *ManagedCallConverterThunk;
    void *UniversalThunk;
};

struct CommonCallingStubInputData
{
    unsigned long* CallingConventionId;
    CallingConventionConverter_CommonCallingStub_PointerData *commonData; // Only the ManagedCallConverterThunk field is used
                                                                          // However, it is specified just like other platforms, so the behavior of the common
                                                                          // calling stub is easier to debug
};

extern "C" void __jmpstub__CallingConventionConverter_CommonCallingStub(CommonCallingStubInputData inputData)
{
    assert(false);
}

extern "C" void CallingConventionConverter_GetStubs(void *returnVoidStub, void *returnIntegerStub, void *commonCallingStub)
{
    assert(false);
}

extern "C" void CallingConventionConverter_SpecifyCommonStubData(CallingConventionConverter_CommonCallingStub_PointerData *commonData)
{
    assert(false);
}
