// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// TODO: Implement these correctly. See Interlocked.s under other architectures for how
// each function should work. This file should ideally be pure WebAssembly for better speed.

#include <AsmOffsets.inc>         // generated by the build from AsmOffsets.cpp

// WARNING: Code in EHHelpers.cpp makes assumptions about this helper, in particular:
// - Function "InWriteBarrierHelper" assumes an AV due to passed in null pointer will happen at RhpLockCmpXchg32AVLocation
// - Function "UnwindWriteBarrierToCaller" assumes the stack contains just the pushed return address
long RhpLockCmpXchg32(long* destination, long value, long comparand)
{
    //int original = *destination;
    //if (*destination == comparand)
    //{
    //    *destination = value;
    //}

    //return original;
    return _InterlockedCompareExchange(destination, value, comparand);
}

// WARNING: Code in EHHelpers.cpp makes assumptions about this helper, in particular:
// - Function "InWriteBarrierHelper" assumes an AV due to passed in null pointer will happen at RhpLockCmpXchg64AVLocation
// - Function "UnwindWriteBarrierToCaller" assumes the stack contains just the pushed return address
// r0      = destination address
// {r2,r3} = value
// sp[0+8] = comparand
__int64 RhpLockCmpXchg64(__int64* destination, __int64 value, __int64 comparand)
{
    return _InterlockedCompareExchange64(destination, value, comparand);
}
