// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// TODO: Implement these to allow exceptions through the runtime. See ExceptionHandling.s under other architectures for how
// each function should work. This file should ideally be pure WebAssembly for better speed.

#include <AsmOffsets.inc>         // generated by the build from AsmOffsets.cpp
#include <cassert>

// Headers are hard to include due to conflicts with AsmOffsets.inc and we'll eventually conert this to assembly.
struct REGDISPLAY;
struct ExInfo;


#define STACKSIZEOF_ExInfo ((SIZEOF__ExInfo + 7)&(~7))

#define rsp_offsetof_ExInfo  0
#define rsp_offsetof_Context STACKSIZEOF_ExInfo

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// RhpThrowHwEx
//
// INPUT:  R0:  exception code of fault
//         R1:  faulting RIP
//
// OUTPUT:
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RhpThrowHwEx(int exceptionCode, void* faultingIP)
{
    assert(false);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// RhpThrowEx
//
// INPUT:  R0:  exception object
//
// OUTPUT:
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RhpThrowEx(void* exception)
{
    assert(false);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// void FASTCALL RhpRethrow()
//
// SUMMARY:  Similar to RhpThrowEx, except that it passes along the currently active ExInfo
//
// INPUT:
//
// OUTPUT:
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RhpRethrow()
{
    assert(false);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// void* FASTCALL RhpCallCatchFunclet(RtuObjectRef exceptionObj,
//                                    void* pHandlerIP,
//                                    REGDISPLAY* pRegDisplay,
//                                    ExInfo* pExInfo)
//
// INPUT:  R0:  exception object
//         R1:  handler funclet address
//         R2:  REGDISPLAY*
//         R3:  ExInfo*
//
// OUTPUT:
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

void* RhpCallCatchFunclet(int exceptionObj,
    void* pHandlerIP,
    REGDISPLAY* pRegDisplay,
    ExInfo* pExInfo)
{
    assert(false);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// void FASTCALL RhpCallFinallyFunclet(void* pHandlerIP, REGDISPLAY* pRegDisplay)
//
// INPUT:  R0:  handler funclet address
//         R1:  REGDISPLAY*
//
// OUTPUT:
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RhpCallFinallyFunclet(void* pHandlerIP, REGDISPLAY* pRegDisplay)
{
    assert(false);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// void* FASTCALL RhpCallFilterFunclet(RtuObjectRef exceptionObj, void* pFilterIP, REGDISPLAY* pRegDisplay)
//
// INPUT:  R0:  exception object
//         R1:  filter funclet address
//         R2:  REGDISPLAY*
//
// OUTPUT:
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// exceptionObj should be an RtuObjectRef, but we can't easily pull in its header
void* RhpCallFilterFunclet(int exceptionObj, void* pFilterIP, REGDISPLAY* pRegDisplay)
{
    assert(false);
}
