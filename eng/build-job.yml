parameters:
  buildConfig: ''
  archType: ''
  osGroup: ''
  osIdentifier: ''
  containerName: ''
  timeoutInMinutes: ''

### Product build
jobs:
- template: xplat-job.yml
  parameters:
    buildConfig: ${{ parameters.buildConfig }}
    archType: ${{ parameters.archType }}
    osGroup: ${{ parameters.osGroup }}
    osIdentifier: ${{ parameters.osIdentifier }}

    # Compute job name from template parameters
    name: ${{ format('build_{0}_{1}_{2}', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}
    displayName: ${{ format('Build {0} {1} {2}', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}

    # Note that the containers are resources defined in azure-pipelines.yml
    containerName: ${{ parameters.containerName }}

    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}

    variables:
    - name: osIdentifier
      value: ${{ parameters.osIdentifier }}

    steps:

    # Install native dependencies
    # Linux builds use docker images with dependencies preinstalled,
    # so we only need this step for OSX and Windows.
    - ${{ if eq(parameters.osGroup, 'OSX') }}:
      - script: sh eng/install-native-dependencies.sh $(osGroup)
        displayName: Install native dependencies

    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      # Necessary to install python
      - script: eng\common\init-tools-native.cmd -InstallDirectory $(Build.SourcesDirectory)\native-tools -Force
        displayName: Install native dependencies

      # Build and tests on Windows
      - script: build.cmd $(buildConfig) skiptests
        displayName: Build product
      - script: tests\runtest.cmd $(buildConfig)
        displayName: Run simple CoreRT tests
      - ${{ if eq(parameters.buildConfig, 'Debug') }}:
        - script: tests\runtest.cmd $(buildConfig) /multimodule
          displayName: Run simple CoreRT tests in the MultiModule mode
        - script: tests\runtest.cmd $(buildConfig) /coreclr ReadyToRun /mode ReadyToRun
          displayName: Run basic ReadyToRun tests
        - script: tests\runtest.cmd $(buildConfig) /coreclr Top200
          displayName: Run CoreCLR Top200 tests

    # Build and tests on non-Windows platforms
    - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      - script: ./build.sh $(buildConfig) skiptests
        displayName: Build product
      - script: tests/runtest.sh $(buildConfig)
        displayName: Run simple CoreRT tests
      - ${{ if eq(parameters.buildConfig, 'Debug') }}:
        - script: tests/runtest.sh $(buildConfig) -coredumps /coreclr Top200
          displayName: Run CoreCLR Top200 tests

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'xUnit'
        testResultsFiles: '**/testResults.xml'
        searchFolder: '$(Build.SourcesDirectory)'
        mergeTestResults: true
        failTaskOnFailedTests: true
        testRunTitle: ${{ format('{0} {1} {2}', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}
        buildPlatform: ${{ parameters.osGroup }}
        buildConfiguration: $(buildConfig)
