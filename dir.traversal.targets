<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target Name="BuildAllProjects">
    <PropertyGroup>
      <DefaultBuildAllTarget Condition="'$(DefaultBuildAllTarget)'==''">$(MSBuildProjectDefaultTargets)</DefaultBuildAllTarget>
    </PropertyGroup>

    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity 
         however since the project names are unique it will essentially force each to run in its own batch -->
    <MSBuild Targets="$(DefaultBuildAllTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'=='true' AND '%(Identity)' != ''"
             Properties="DefaultBuildAllTarget=$(DefaultBuildAllTarget);BuildAllProjects=true"
             ContinueOnError="ErrorAndContinue" />

    <MSBuild Targets="$(DefaultBuildAllTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'!='true'"
             Properties="DefaultBuildAllTarget=$(DefaultBuildAllTarget);BuildAllProjects=true"
             BuildInParallel="true"
             ContinueOnError="ErrorAndContinue" />

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

  <Target Name="CleanAllProjects">
    <PropertyGroup>
      <DefaultCleanAllTarget Condition="'$(DefaultCleanAllTarget)'==''">Clean</DefaultCleanAllTarget>
    </PropertyGroup>

    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity 
         however since the project names are unique it will essentially force each to run in its own batch -->
    <MSBuild Targets="$(DefaultCleanAllTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'=='true' AND '%(Identity)' != ''"
             Properties="CleanAllProjects=true"
             ContinueOnError="ErrorAndContinue" />

    <MSBuild Targets="$(DefaultCleanAllTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'!='true'"
             Properties="CleanAllProjects=true"
             BuildInParallel="true"
             ContinueOnError="ErrorAndContinue" />

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

  <Target Name="RestoreAllProjects">
    <Message Importance="High" Text="Restoring project packages..." />

    <PropertyGroup>
      <DefaultRestoreAllTarget Condition="'$(DefaultRestoreAllTarget)'==''">Restore</DefaultRestoreAllTarget>
    </PropertyGroup>

    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity 
      however since the project names are unique it will essentially force each to run in its own batch -->
    <MSBuild Targets="$(DefaultRestoreAllTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'=='true' AND '%(Identity)' != ''"
             Properties="RestoreAll=true"
             ContinueOnError="ErrorAndContinue" />

    <MSBuild Targets="$(DefaultRestoreAllTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'!='true'"
             Properties="RestoreAll=true"
             BuildInParallel="true"
             ContinueOnError="ErrorAndContinue" />

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

  <PropertyGroup>
    <TraversalBuildDependsOn>
      BuildAllProjects;
      $(TraversalBuildDependsOn);
    </TraversalBuildDependsOn>

    <TraversalCleanDependsOn>
      CleanAllProjects;
      $(TraversalCleanDependsOn);
    </TraversalCleanDependsOn>

    <TraversalRestoreDependsOn>
      RestoreAllProjects;
      $(TraversalRestoreDependsOn)
    </TraversalRestoreDependsOn>
  </PropertyGroup>

  <Target Name="Build" DependsOnTargets="$(TraversalBuildDependsOn)" />

  <Target Name="Clean" DependsOnTargets="$(TraversalCleanDependsOn)" />

  <Target Name="Rebuild" DependsOnTargets="Clean;Build" />

  <Target Name="Restore" DependsOnTargets="$(TraversalRestoreDependsOn)" />

</Project>
