#!/usr/bin/env bash

# This is the Unix equivalent of build-and-run-test.cmd
# It is invoked by each test's bash script. The reason it's called corerun is that
# the unix CoreCLR tests don't have a custom runner override environment variable.
# See issue https://github.com/dotnet/coreclr/issues/9007

export TestExecutable=$1
export TestFileName=${TestExecutable%.*}

source "$CoreRT_TestRoot/coredump_handling.sh"

if [[ $CoreRT_EnableCoreDumps == 1 ]]; then
    set_up_core_dump_generation
fi

cp $CoreRT_TestRoot/CoreCLR/Test.csproj .

__msbuild_dir=${CoreRT_TestRoot}/../Tools
echo ${__msbuild_dir}/msbuild.sh /m /p:IlcPath=${CoreRT_ToolchainDir} /p:Configuration=${CoreRT_BuildType} Test.csproj
${__msbuild_dir}/msbuild.sh /m /p:IlcPath=${CoreRT_ToolchainDir} /p:Configuration=${CoreRT_BuildType} Test.csproj

if [[ $CoreRT_EnableCoreDumps == 1 ]]; then
    # Handle any core files generated when running the test IL through the toolchain.
    inspect_and_delete_core_files $CoreRT_ToolchainDir/corerun "$CoreRT_ToolchainDir"
fi

# Remove the test executable from the arg list so it isn't passed to test execution
shift

if [[ ! -f native/${TestFileName} ]]; then
    echo "ERROR: Native binary not found. Unable to run test."
    exit -1
fi

native/${TestFileName} "$@"
testScriptExitCode=$?

if [[ $CoreRT_EnableCoreDumps == 1 ]]; then
    # Handle any core files generated when running the test.
    inspect_and_delete_core_files native/$TestFileName "$CoreRT_ToolchainDir"
fi

# Clean up test binary artifacts to save space
rm -r native 2>/dev/null

exit $testScriptExitCode
